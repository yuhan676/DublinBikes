{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "9dae8a7a-729c-40fa-9e40-09b4bd7edc5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import sklearn as mp\n",
    "from sklearn.linear_model import LogisticRegression, LinearRegression\n",
    "# import requests as rq\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_validate\n",
    "from sklearn.metrics import mean_squared_error, accuracy_score, precision_score, recall_score, r2_score\n",
    "from sklearn import metrics\n",
    "import datetime as dt\n",
    "import numpy as np\n",
    "# Allows plots to appear directly in the notebook.\n",
    "%matplotlib inline\n",
    "%matplotlib inline\n",
    "import csv\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "f631b191-6f20-433c-8230-92c031c10db1",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# capture magic method allows to hide the output cell\n",
    "# define tables here so that they would be visible during the model prediciton\n",
    "CurrentWeather = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS CurrentWeather (\n",
    "        time_update DATETIME NOT NULL,\n",
    "        current_weather_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "        feels_like DECIMAL(5, 2) NOT NULL,\n",
    "        temperature_min DECIMAL(5, 2) NOT NULL,\n",
    "        temperature_max DECIMAL(5, 2) NOT NULL,\n",
    "        weather_description VARCHAR(120),\n",
    "        wind_speed DECIMAL(5, 2) NOT NULL,\n",
    "        wind_gust DECIMAL(5, 2) NOT NULL DEFAULT 0\n",
    "    );\n",
    "\"\"\"\n",
    "# Copying the extreme weather table here, to merge timestamp later\n",
    "ExtremeWeather = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS ExtremeWeather (\n",
    "        time_update DATETIME NOT NULL,\n",
    "        extreme_weather_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "        temp_min DECIMAL(5, 2) NOT NULL,\n",
    "        temp_max DECIMAL(5, 2) NOT NULL,\n",
    "        wind_speed DECIMAL(5, 2) NOT NULL,\n",
    "        gust_speed DECIMAL(5, 2) NOT NULL DEFAULT 0,\n",
    "        rain_3h DECIMAL(5, 2) NOT NULL DEFAULT 0\n",
    "    );\n",
    "\"\"\"\n",
    "\n",
    "FiveDayPrediction = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS FiveDayPrediction (\n",
    "        time_update DATETIME NOT NULL,\n",
    "        forecast_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "        temp_min DECIMAL(5, 2) NOT NULL,\n",
    "        temp_max DECIMAL(5, 2) NOT NULL,\n",
    "        wind_speed DECIMAL(5, 2) NOT NULL,\n",
    "        gust DECIMAL(5, 2) NOT NULL DEFAULT 0,\n",
    "        rain_3h DECIMAL(5, 2) NOT NULL DEFAULT 0\n",
    "    );\n",
    "\"\"\"\n",
    "# static station data\n",
    "Station = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS station (\n",
    "        number INT NOT NULL,\n",
    "        name VARCHAR (120),\n",
    "        address VARCHAR(256),\n",
    "        banking TINYINT(1), \n",
    "        bonus TINYINT(1),\n",
    "        position_lat REAL,\n",
    "        position_lng REAL, \n",
    "        PRIMARY KEY (number)\n",
    "    );\n",
    "\"\"\"\n",
    "# Dynamic station data\n",
    "StationStatus = \"\"\"\n",
    "    DROP TABLE IF EXISTS station_status;\n",
    "    CREATE TABLE station_status (\n",
    "        station_number INT NOT NULL,\n",
    "        status VARCHAR(256) NOT NULL,\n",
    "        last_update DATETIME,\n",
    "        empty_stands_number INT,\n",
    "        total_bikes INT,\n",
    "        mechanical_bikes INT,\n",
    "        electrical_internal_battery_bikes INT,\n",
    "        electrical_removable_battery_bikes INT,\n",
    "        PRIMARY KEY (station_number, last_update),\n",
    "        FOREIGN KEY (station_number) REFERENCES station(number)\n",
    "        ON DELETE CASCADE\n",
    "    );\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3b46dcd-a841-44b0-977d-a1a69ee9e5dd",
   "metadata": {},
   "source": [
    "<p>The code below reads multiple CSV files (<code>ExtremeWeather.csv</code>, <code>CurrentWeather.csv</code>, <code>FiveDayPrediction.csv</code>, <code>station.csv</code>, and <code>station_status.csv</code>) into pandas DataFrames, handling errors such as \"Error tokenizing data. C error: EOF inside string\" by disabling quoting during CSV parsing. It then prints the first 5 rows of each DataFrame if available.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "944b97dc-bada-4d2b-9702-bae459f0714c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_29841\">\n",
       "  <caption>The first 5 rows of df_extreme_weather DataFrame</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_29841_level0_col0\" class=\"col_heading level0 col0\" >time_update</th>\n",
       "      <th id=\"T_29841_level0_col1\" class=\"col_heading level0 col1\" >extreme_weather_id</th>\n",
       "      <th id=\"T_29841_level0_col2\" class=\"col_heading level0 col2\" >temp_min</th>\n",
       "      <th id=\"T_29841_level0_col3\" class=\"col_heading level0 col3\" >temp_max</th>\n",
       "      <th id=\"T_29841_level0_col4\" class=\"col_heading level0 col4\" >wind_speed</th>\n",
       "      <th id=\"T_29841_level0_col5\" class=\"col_heading level0 col5\" >gust_speed</th>\n",
       "      <th id=\"T_29841_level0_col6\" class=\"col_heading level0 col6\" >rain_3h</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_29841_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_29841_row0_col0\" class=\"data row0 col0\" >\"2024-02-29 00:00:00\"</td>\n",
       "      <td id=\"T_29841_row0_col1\" class=\"data row0 col1\" >1</td>\n",
       "      <td id=\"T_29841_row0_col2\" class=\"data row0 col2\" >288.940000</td>\n",
       "      <td id=\"T_29841_row0_col3\" class=\"data row0 col3\" >290.530000</td>\n",
       "      <td id=\"T_29841_row0_col4\" class=\"data row0 col4\" >2.540000</td>\n",
       "      <td id=\"T_29841_row0_col5\" class=\"data row0 col5\" >3.030000</td>\n",
       "      <td id=\"T_29841_row0_col6\" class=\"data row0 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_29841_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_29841_row1_col0\" class=\"data row1 col0\" >\"2024-02-29 03:00:00\"</td>\n",
       "      <td id=\"T_29841_row1_col1\" class=\"data row1 col1\" >2</td>\n",
       "      <td id=\"T_29841_row1_col2\" class=\"data row1 col2\" >282.810000</td>\n",
       "      <td id=\"T_29841_row1_col3\" class=\"data row1 col3\" >285.650000</td>\n",
       "      <td id=\"T_29841_row1_col4\" class=\"data row1 col4\" >1.780000</td>\n",
       "      <td id=\"T_29841_row1_col5\" class=\"data row1 col5\" >2.470000</td>\n",
       "      <td id=\"T_29841_row1_col6\" class=\"data row1 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_29841_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_29841_row2_col0\" class=\"data row2 col0\" >\"2024-02-29 06:00:00\"</td>\n",
       "      <td id=\"T_29841_row2_col1\" class=\"data row2 col1\" >3</td>\n",
       "      <td id=\"T_29841_row2_col2\" class=\"data row2 col2\" >281.980000</td>\n",
       "      <td id=\"T_29841_row2_col3\" class=\"data row2 col3\" >281.980000</td>\n",
       "      <td id=\"T_29841_row2_col4\" class=\"data row2 col4\" >1.460000</td>\n",
       "      <td id=\"T_29841_row2_col5\" class=\"data row2 col5\" >1.660000</td>\n",
       "      <td id=\"T_29841_row2_col6\" class=\"data row2 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_29841_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_29841_row3_col0\" class=\"data row3 col0\" >\"2024-02-29 09:00:00\"</td>\n",
       "      <td id=\"T_29841_row3_col1\" class=\"data row3 col1\" >4</td>\n",
       "      <td id=\"T_29841_row3_col2\" class=\"data row3 col2\" >282.090000</td>\n",
       "      <td id=\"T_29841_row3_col3\" class=\"data row3 col3\" >282.090000</td>\n",
       "      <td id=\"T_29841_row3_col4\" class=\"data row3 col4\" >1.610000</td>\n",
       "      <td id=\"T_29841_row3_col5\" class=\"data row3 col5\" >2.130000</td>\n",
       "      <td id=\"T_29841_row3_col6\" class=\"data row3 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_29841_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_29841_row4_col0\" class=\"data row4 col0\" >\"2024-02-29 12:00:00\"</td>\n",
       "      <td id=\"T_29841_row4_col1\" class=\"data row4 col1\" >5</td>\n",
       "      <td id=\"T_29841_row4_col2\" class=\"data row4 col2\" >281.890000</td>\n",
       "      <td id=\"T_29841_row4_col3\" class=\"data row4 col3\" >281.890000</td>\n",
       "      <td id=\"T_29841_row4_col4\" class=\"data row4 col4\" >2.140000</td>\n",
       "      <td id=\"T_29841_row4_col5\" class=\"data row4 col5\" >4.210000</td>\n",
       "      <td id=\"T_29841_row4_col6\" class=\"data row4 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x24c56543490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_10d98\">\n",
       "  <caption>The first 5 rows of df_current_weather DataFrame</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_10d98_level0_col0\" class=\"col_heading level0 col0\" >time_update</th>\n",
       "      <th id=\"T_10d98_level0_col1\" class=\"col_heading level0 col1\" >current_weather_id</th>\n",
       "      <th id=\"T_10d98_level0_col2\" class=\"col_heading level0 col2\" >feels_like</th>\n",
       "      <th id=\"T_10d98_level0_col3\" class=\"col_heading level0 col3\" >temperature_min</th>\n",
       "      <th id=\"T_10d98_level0_col4\" class=\"col_heading level0 col4\" >temperature_max</th>\n",
       "      <th id=\"T_10d98_level0_col5\" class=\"col_heading level0 col5\" >weather_description</th>\n",
       "      <th id=\"T_10d98_level0_col6\" class=\"col_heading level0 col6\" >wind_speed</th>\n",
       "      <th id=\"T_10d98_level0_col7\" class=\"col_heading level0 col7\" >wind_gust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_10d98_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_10d98_row0_col0\" class=\"data row0 col0\" >\"2024-02-28 20:12:40\"</td>\n",
       "      <td id=\"T_10d98_row0_col1\" class=\"data row0 col1\" >1</td>\n",
       "      <td id=\"T_10d98_row0_col2\" class=\"data row0 col2\" >289.140000</td>\n",
       "      <td id=\"T_10d98_row0_col3\" class=\"data row0 col3\" >286.870000</td>\n",
       "      <td id=\"T_10d98_row0_col4\" class=\"data row0 col4\" >293.340000</td>\n",
       "      <td id=\"T_10d98_row0_col5\" class=\"data row0 col5\" >\"clear sky\"</td>\n",
       "      <td id=\"T_10d98_row0_col6\" class=\"data row0 col6\" >2.570000</td>\n",
       "      <td id=\"T_10d98_row0_col7\" class=\"data row0 col7\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_10d98_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_10d98_row1_col0\" class=\"data row1 col0\" >\"2024-02-28 20:28:19\"</td>\n",
       "      <td id=\"T_10d98_row1_col1\" class=\"data row1 col1\" >2</td>\n",
       "      <td id=\"T_10d98_row1_col2\" class=\"data row1 col2\" >289.530000</td>\n",
       "      <td id=\"T_10d98_row1_col3\" class=\"data row1 col3\" >287.620000</td>\n",
       "      <td id=\"T_10d98_row1_col4\" class=\"data row1 col4\" >293.590000</td>\n",
       "      <td id=\"T_10d98_row1_col5\" class=\"data row1 col5\" >\"clear sky\"</td>\n",
       "      <td id=\"T_10d98_row1_col6\" class=\"data row1 col6\" >2.570000</td>\n",
       "      <td id=\"T_10d98_row1_col7\" class=\"data row1 col7\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_10d98_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_10d98_row2_col0\" class=\"data row2 col0\" >\"2024-02-28 20:59:25\"</td>\n",
       "      <td id=\"T_10d98_row2_col1\" class=\"data row2 col1\" >3</td>\n",
       "      <td id=\"T_10d98_row2_col2\" class=\"data row2 col2\" >290.160000</td>\n",
       "      <td id=\"T_10d98_row2_col3\" class=\"data row2 col3\" >288.180000</td>\n",
       "      <td id=\"T_10d98_row2_col4\" class=\"data row2 col4\" >293.990000</td>\n",
       "      <td id=\"T_10d98_row2_col5\" class=\"data row2 col5\" >\"few clouds\"</td>\n",
       "      <td id=\"T_10d98_row2_col6\" class=\"data row2 col6\" >0.450000</td>\n",
       "      <td id=\"T_10d98_row2_col7\" class=\"data row2 col7\" >3.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_10d98_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_10d98_row3_col0\" class=\"data row3 col0\" >\"2024-02-28 21:12:45\"</td>\n",
       "      <td id=\"T_10d98_row3_col1\" class=\"data row3 col1\" >4</td>\n",
       "      <td id=\"T_10d98_row3_col2\" class=\"data row3 col2\" >290.230000</td>\n",
       "      <td id=\"T_10d98_row3_col3\" class=\"data row3 col3\" >287.990000</td>\n",
       "      <td id=\"T_10d98_row3_col4\" class=\"data row3 col4\" >294.470000</td>\n",
       "      <td id=\"T_10d98_row3_col5\" class=\"data row3 col5\" >\"clear sky\"</td>\n",
       "      <td id=\"T_10d98_row3_col6\" class=\"data row3 col6\" >3.090000</td>\n",
       "      <td id=\"T_10d98_row3_col7\" class=\"data row3 col7\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_10d98_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_10d98_row4_col0\" class=\"data row4 col0\" >\"2024-02-28 21:24:26\"</td>\n",
       "      <td id=\"T_10d98_row4_col1\" class=\"data row4 col1\" >5</td>\n",
       "      <td id=\"T_10d98_row4_col2\" class=\"data row4 col2\" >290.410000</td>\n",
       "      <td id=\"T_10d98_row4_col3\" class=\"data row4 col3\" >287.980000</td>\n",
       "      <td id=\"T_10d98_row4_col4\" class=\"data row4 col4\" >294.160000</td>\n",
       "      <td id=\"T_10d98_row4_col5\" class=\"data row4 col5\" >\"clear sky\"</td>\n",
       "      <td id=\"T_10d98_row4_col6\" class=\"data row4 col6\" >3.090000</td>\n",
       "      <td id=\"T_10d98_row4_col7\" class=\"data row4 col7\" >0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x24c55f35750>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_95e7b\">\n",
       "  <caption>The first 5 rows of df_five_day_prediction DataFrame</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_95e7b_level0_col0\" class=\"col_heading level0 col0\" >time_update</th>\n",
       "      <th id=\"T_95e7b_level0_col1\" class=\"col_heading level0 col1\" >forecast_id</th>\n",
       "      <th id=\"T_95e7b_level0_col2\" class=\"col_heading level0 col2\" >temp_min</th>\n",
       "      <th id=\"T_95e7b_level0_col3\" class=\"col_heading level0 col3\" >temp_max</th>\n",
       "      <th id=\"T_95e7b_level0_col4\" class=\"col_heading level0 col4\" >wind_speed</th>\n",
       "      <th id=\"T_95e7b_level0_col5\" class=\"col_heading level0 col5\" >gust</th>\n",
       "      <th id=\"T_95e7b_level0_col6\" class=\"col_heading level0 col6\" >rain_3h</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_95e7b_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_95e7b_row0_col0\" class=\"data row0 col0\" >\"2024-02-29 00:00:00\"</td>\n",
       "      <td id=\"T_95e7b_row0_col1\" class=\"data row0 col1\" >1</td>\n",
       "      <td id=\"T_95e7b_row0_col2\" class=\"data row0 col2\" >288.940000</td>\n",
       "      <td id=\"T_95e7b_row0_col3\" class=\"data row0 col3\" >290.650000</td>\n",
       "      <td id=\"T_95e7b_row0_col4\" class=\"data row0 col4\" >2.540000</td>\n",
       "      <td id=\"T_95e7b_row0_col5\" class=\"data row0 col5\" >3.030000</td>\n",
       "      <td id=\"T_95e7b_row0_col6\" class=\"data row0 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_95e7b_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_95e7b_row1_col0\" class=\"data row1 col0\" >\"2024-02-29 03:00:00\"</td>\n",
       "      <td id=\"T_95e7b_row1_col1\" class=\"data row1 col1\" >2</td>\n",
       "      <td id=\"T_95e7b_row1_col2\" class=\"data row1 col2\" >282.810000</td>\n",
       "      <td id=\"T_95e7b_row1_col3\" class=\"data row1 col3\" >285.710000</td>\n",
       "      <td id=\"T_95e7b_row1_col4\" class=\"data row1 col4\" >1.780000</td>\n",
       "      <td id=\"T_95e7b_row1_col5\" class=\"data row1 col5\" >2.470000</td>\n",
       "      <td id=\"T_95e7b_row1_col6\" class=\"data row1 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_95e7b_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_95e7b_row2_col0\" class=\"data row2 col0\" >\"2024-02-29 06:00:00\"</td>\n",
       "      <td id=\"T_95e7b_row2_col1\" class=\"data row2 col1\" >3</td>\n",
       "      <td id=\"T_95e7b_row2_col2\" class=\"data row2 col2\" >281.980000</td>\n",
       "      <td id=\"T_95e7b_row2_col3\" class=\"data row2 col3\" >281.980000</td>\n",
       "      <td id=\"T_95e7b_row2_col4\" class=\"data row2 col4\" >1.460000</td>\n",
       "      <td id=\"T_95e7b_row2_col5\" class=\"data row2 col5\" >1.660000</td>\n",
       "      <td id=\"T_95e7b_row2_col6\" class=\"data row2 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_95e7b_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_95e7b_row3_col0\" class=\"data row3 col0\" >\"2024-02-29 09:00:00\"</td>\n",
       "      <td id=\"T_95e7b_row3_col1\" class=\"data row3 col1\" >4</td>\n",
       "      <td id=\"T_95e7b_row3_col2\" class=\"data row3 col2\" >282.090000</td>\n",
       "      <td id=\"T_95e7b_row3_col3\" class=\"data row3 col3\" >282.090000</td>\n",
       "      <td id=\"T_95e7b_row3_col4\" class=\"data row3 col4\" >1.610000</td>\n",
       "      <td id=\"T_95e7b_row3_col5\" class=\"data row3 col5\" >2.130000</td>\n",
       "      <td id=\"T_95e7b_row3_col6\" class=\"data row3 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_95e7b_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_95e7b_row4_col0\" class=\"data row4 col0\" >\"2024-02-29 12:00:00\"</td>\n",
       "      <td id=\"T_95e7b_row4_col1\" class=\"data row4 col1\" >5</td>\n",
       "      <td id=\"T_95e7b_row4_col2\" class=\"data row4 col2\" >281.890000</td>\n",
       "      <td id=\"T_95e7b_row4_col3\" class=\"data row4 col3\" >281.890000</td>\n",
       "      <td id=\"T_95e7b_row4_col4\" class=\"data row4 col4\" >2.140000</td>\n",
       "      <td id=\"T_95e7b_row4_col5\" class=\"data row4 col5\" >4.210000</td>\n",
       "      <td id=\"T_95e7b_row4_col6\" class=\"data row4 col6\" >0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x24c560e7d10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_4f341\">\n",
       "  <caption>The first 5 rows of df_station DataFrame</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_4f341_level0_col0\" class=\"col_heading level0 col0\" >number</th>\n",
       "      <th id=\"T_4f341_level0_col1\" class=\"col_heading level0 col1\" >name</th>\n",
       "      <th id=\"T_4f341_level0_col2\" class=\"col_heading level0 col2\" >address</th>\n",
       "      <th id=\"T_4f341_level0_col3\" class=\"col_heading level0 col3\" >banking</th>\n",
       "      <th id=\"T_4f341_level0_col4\" class=\"col_heading level0 col4\" >bonus</th>\n",
       "      <th id=\"T_4f341_level0_col5\" class=\"col_heading level0 col5\" >position_lat</th>\n",
       "      <th id=\"T_4f341_level0_col6\" class=\"col_heading level0 col6\" >position_lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_4f341_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_4f341_row0_col0\" class=\"data row0 col0\" >1</td>\n",
       "      <td id=\"T_4f341_row0_col1\" class=\"data row0 col1\" >\"CLARENDON ROW\"</td>\n",
       "      <td id=\"T_4f341_row0_col2\" class=\"data row0 col2\" >\"Clarendon Row\"</td>\n",
       "      <td id=\"T_4f341_row0_col3\" class=\"data row0 col3\" >0</td>\n",
       "      <td id=\"T_4f341_row0_col4\" class=\"data row0 col4\" >0</td>\n",
       "      <td id=\"T_4f341_row0_col5\" class=\"data row0 col5\" >53.340927</td>\n",
       "      <td id=\"T_4f341_row0_col6\" class=\"data row0 col6\" >-6.262501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_4f341_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_4f341_row1_col0\" class=\"data row1 col0\" >2</td>\n",
       "      <td id=\"T_4f341_row1_col1\" class=\"data row1 col1\" >\"BLESSINGTON STREET\"</td>\n",
       "      <td id=\"T_4f341_row1_col2\" class=\"data row1 col2\" >\"Blessington Street\"</td>\n",
       "      <td id=\"T_4f341_row1_col3\" class=\"data row1 col3\" >0</td>\n",
       "      <td id=\"T_4f341_row1_col4\" class=\"data row1 col4\" >0</td>\n",
       "      <td id=\"T_4f341_row1_col5\" class=\"data row1 col5\" >53.356769</td>\n",
       "      <td id=\"T_4f341_row1_col6\" class=\"data row1 col6\" >-6.268140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_4f341_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_4f341_row2_col0\" class=\"data row2 col0\" >3</td>\n",
       "      <td id=\"T_4f341_row2_col1\" class=\"data row2 col1\" >\"BOLTON STREET\"</td>\n",
       "      <td id=\"T_4f341_row2_col2\" class=\"data row2 col2\" >\"Bolton Street\"</td>\n",
       "      <td id=\"T_4f341_row2_col3\" class=\"data row2 col3\" >0</td>\n",
       "      <td id=\"T_4f341_row2_col4\" class=\"data row2 col4\" >0</td>\n",
       "      <td id=\"T_4f341_row2_col5\" class=\"data row2 col5\" >53.351182</td>\n",
       "      <td id=\"T_4f341_row2_col6\" class=\"data row2 col6\" >-6.269859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_4f341_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_4f341_row3_col0\" class=\"data row3 col0\" >4</td>\n",
       "      <td id=\"T_4f341_row3_col1\" class=\"data row3 col1\" >\"GREEK STREET\"</td>\n",
       "      <td id=\"T_4f341_row3_col2\" class=\"data row3 col2\" >\"Greek Street\"</td>\n",
       "      <td id=\"T_4f341_row3_col3\" class=\"data row3 col3\" >0</td>\n",
       "      <td id=\"T_4f341_row3_col4\" class=\"data row3 col4\" >0</td>\n",
       "      <td id=\"T_4f341_row3_col5\" class=\"data row3 col5\" >53.346874</td>\n",
       "      <td id=\"T_4f341_row3_col6\" class=\"data row3 col6\" >-6.272976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_4f341_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_4f341_row4_col0\" class=\"data row4 col0\" >5</td>\n",
       "      <td id=\"T_4f341_row4_col1\" class=\"data row4 col1\" >\"CHARLEMONT PLACE\"</td>\n",
       "      <td id=\"T_4f341_row4_col2\" class=\"data row4 col2\" >\"Charlemont Street\"</td>\n",
       "      <td id=\"T_4f341_row4_col3\" class=\"data row4 col3\" >0</td>\n",
       "      <td id=\"T_4f341_row4_col4\" class=\"data row4 col4\" >0</td>\n",
       "      <td id=\"T_4f341_row4_col5\" class=\"data row4 col5\" >53.330662</td>\n",
       "      <td id=\"T_4f341_row4_col6\" class=\"data row4 col6\" >-6.260177</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x24c5a4a82d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_b3e90\">\n",
       "  <caption>The first 5 rows of df_station_status DataFrame</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_b3e90_level0_col0\" class=\"col_heading level0 col0\" >station_number</th>\n",
       "      <th id=\"T_b3e90_level0_col1\" class=\"col_heading level0 col1\" >status</th>\n",
       "      <th id=\"T_b3e90_level0_col2\" class=\"col_heading level0 col2\" >last_update</th>\n",
       "      <th id=\"T_b3e90_level0_col3\" class=\"col_heading level0 col3\" >empty_stands_number</th>\n",
       "      <th id=\"T_b3e90_level0_col4\" class=\"col_heading level0 col4\" >total_bikes</th>\n",
       "      <th id=\"T_b3e90_level0_col5\" class=\"col_heading level0 col5\" >mechanical_bikes</th>\n",
       "      <th id=\"T_b3e90_level0_col6\" class=\"col_heading level0 col6\" >electrical_internal_battery_bikes</th>\n",
       "      <th id=\"T_b3e90_level0_col7\" class=\"col_heading level0 col7\" >electrical_removable_battery_bikes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_b3e90_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_b3e90_row0_col0\" class=\"data row0 col0\" >1</td>\n",
       "      <td id=\"T_b3e90_row0_col1\" class=\"data row0 col1\" >OPEN</td>\n",
       "      <td id=\"T_b3e90_row0_col2\" class=\"data row0 col2\" >\"2024-02-27 21:17:08\"</td>\n",
       "      <td id=\"T_b3e90_row0_col3\" class=\"data row0 col3\" >20.000000</td>\n",
       "      <td id=\"T_b3e90_row0_col4\" class=\"data row0 col4\" >11.000000</td>\n",
       "      <td id=\"T_b3e90_row0_col5\" class=\"data row0 col5\" >6.000000</td>\n",
       "      <td id=\"T_b3e90_row0_col6\" class=\"data row0 col6\" >0.000000</td>\n",
       "      <td id=\"T_b3e90_row0_col7\" class=\"data row0 col7\" >5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_b3e90_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_b3e90_row1_col0\" class=\"data row1 col0\" >1</td>\n",
       "      <td id=\"T_b3e90_row1_col1\" class=\"data row1 col1\" >OPEN</td>\n",
       "      <td id=\"T_b3e90_row1_col2\" class=\"data row1 col2\" >\"2024-02-28 22:19:27\"</td>\n",
       "      <td id=\"T_b3e90_row1_col3\" class=\"data row1 col3\" >21.000000</td>\n",
       "      <td id=\"T_b3e90_row1_col4\" class=\"data row1 col4\" >10.000000</td>\n",
       "      <td id=\"T_b3e90_row1_col5\" class=\"data row1 col5\" >4.000000</td>\n",
       "      <td id=\"T_b3e90_row1_col6\" class=\"data row1 col6\" >0.000000</td>\n",
       "      <td id=\"T_b3e90_row1_col7\" class=\"data row1 col7\" >6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_b3e90_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_b3e90_row2_col0\" class=\"data row2 col0\" >1</td>\n",
       "      <td id=\"T_b3e90_row2_col1\" class=\"data row2 col1\" >OPEN</td>\n",
       "      <td id=\"T_b3e90_row2_col2\" class=\"data row2 col2\" >\"2024-02-28 22:51:18\"</td>\n",
       "      <td id=\"T_b3e90_row2_col3\" class=\"data row2 col3\" >22.000000</td>\n",
       "      <td id=\"T_b3e90_row2_col4\" class=\"data row2 col4\" >9.000000</td>\n",
       "      <td id=\"T_b3e90_row2_col5\" class=\"data row2 col5\" >4.000000</td>\n",
       "      <td id=\"T_b3e90_row2_col6\" class=\"data row2 col6\" >0.000000</td>\n",
       "      <td id=\"T_b3e90_row2_col7\" class=\"data row2 col7\" >5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_b3e90_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_b3e90_row3_col0\" class=\"data row3 col0\" >1</td>\n",
       "      <td id=\"T_b3e90_row3_col1\" class=\"data row3 col1\" >OPEN</td>\n",
       "      <td id=\"T_b3e90_row3_col2\" class=\"data row3 col2\" >\"2024-02-28 22:59:51\"</td>\n",
       "      <td id=\"T_b3e90_row3_col3\" class=\"data row3 col3\" >22.000000</td>\n",
       "      <td id=\"T_b3e90_row3_col4\" class=\"data row3 col4\" >9.000000</td>\n",
       "      <td id=\"T_b3e90_row3_col5\" class=\"data row3 col5\" >4.000000</td>\n",
       "      <td id=\"T_b3e90_row3_col6\" class=\"data row3 col6\" >0.000000</td>\n",
       "      <td id=\"T_b3e90_row3_col7\" class=\"data row3 col7\" >5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_b3e90_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_b3e90_row4_col0\" class=\"data row4 col0\" >1</td>\n",
       "      <td id=\"T_b3e90_row4_col1\" class=\"data row4 col1\" >OPEN</td>\n",
       "      <td id=\"T_b3e90_row4_col2\" class=\"data row4 col2\" >\"2024-02-28 23:09:57\"</td>\n",
       "      <td id=\"T_b3e90_row4_col3\" class=\"data row4 col3\" >22.000000</td>\n",
       "      <td id=\"T_b3e90_row4_col4\" class=\"data row4 col4\" >9.000000</td>\n",
       "      <td id=\"T_b3e90_row4_col5\" class=\"data row4 col5\" >4.000000</td>\n",
       "      <td id=\"T_b3e90_row4_col6\" class=\"data row4 col6\" >0.000000</td>\n",
       "      <td id=\"T_b3e90_row4_col7\" class=\"data row4 col7\" >5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x24c5a4a8dd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def read_csv_with_error_handling(file_path):\n",
    "    try:\n",
    "        # Attempt to read the CSV file\n",
    "        df = pd.read_csv(file_path, quoting=csv.QUOTE_NONE)\n",
    "        return df\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred while reading CSV file {file_path}:\")\n",
    "        print(e)\n",
    "        return None\n",
    "\n",
    "# Call the function to read each CSV file\n",
    "df_extreme_weather = read_csv_with_error_handling('ExtremeWeather.csv')\n",
    "df_current_weather = read_csv_with_error_handling('CurrentWeather.csv')\n",
    "df_five_day_prediction = read_csv_with_error_handling('FiveDayPrediction.csv')\n",
    "df_station = read_csv_with_error_handling('station.csv')\n",
    "df_station_status = read_csv_with_error_handling('station_status.csv')\n",
    "\n",
    "# Show the first few rows in each data frame if available\n",
    "if df_extreme_weather is not None:\n",
    "    df_extreme_weather_head = df_extreme_weather.head(5)\n",
    "    display(df_extreme_weather_head.style.set_caption(\"The first 5 rows of df_extreme_weather DataFrame\"))\n",
    "\n",
    "if df_current_weather is not None:\n",
    "    df_current_weather_head = df_current_weather.head(5)\n",
    "    display(df_current_weather_head.style.set_caption(\"The first 5 rows of df_current_weather DataFrame\"))\n",
    "\n",
    "if df_five_day_prediction is not None:\n",
    "    df_five_day_prediction_head = df_five_day_prediction.head(5)\n",
    "    display(df_five_day_prediction_head.style.set_caption(\"The first 5 rows of df_five_day_prediction DataFrame\"))\n",
    "\n",
    "if df_station is not None:\n",
    "    df_station_head = df_station.head(5)\n",
    "    display(df_station_head.style.set_caption(\"The first 5 rows of df_station DataFrame\"))\n",
    "\n",
    "if df_station_status is not None:\n",
    "    df_station_status_head = df_station_status.head(5)\n",
    "    display(df_station_status_head.style.set_caption(\"The first 5 rows of df_station_status DataFrame\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc25952b-a942-4eb8-af1e-78c11f2298b0",
   "metadata": {},
   "source": [
    "<p>The code below calculates and prints the smallest range of dates for two different datasets: <code>station status<code> and <code>weather</code>. It finds the minimum and maximum dates within the <code>last_update</code> column of the <code>station_status</code> DataFrame and the <code>time_update</code>column of the weather DataFrames ('df_current_weather', 'df_five_day_prediction', 'df_extreme_weather'). Then, it prints these ranges for both datasets.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d1df8f93-94b1-497b-bf7c-b31b34cb35a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Smallest range of dates for station status: \"2024-02-27 21:08:12\" - \"2024-04-12 13:14:10\"\n",
      "Smallest range of dates for weather: \"2024-02-28 20:12:40\" - \"2024-04-17 12:00:00\"\n"
     ]
    }
   ],
   "source": [
    "# Get the smallest range of dates for station status\n",
    "min_date_station_status = df_station_status['last_update'].min()\n",
    "max_date_station_status = df_station_status['last_update'].max()\n",
    "\n",
    "# Get the smallest range of dates for weather\n",
    "min_date_weather = min(df_current_weather['time_update'].min(), df_five_day_prediction['time_update'].min(), df_extreme_weather['time_update'].min())\n",
    "max_date_weather = max(df_current_weather['time_update'].max(), df_five_day_prediction['time_update'].max(), df_extreme_weather['time_update'].max())\n",
    "\n",
    "# Get the smallest range of dates for station status\n",
    "print(\"Smallest range of dates for station status:\", df_station_status['last_update'].min(), \"-\", df_station_status['last_update'].max())\n",
    "\n",
    "# Get the smallest range of dates for weather\n",
    "print(\"Smallest range of dates for weather:\", min(df_current_weather['time_update'].min(), df_five_day_prediction['time_update'].min(), df_extreme_weather['time_update'].min()), \"-\", max(df_current_weather['time_update'].max(), df_five_day_prediction['time_update'].max(), df_extreme_weather['time_update'].max()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "596449e9-d5ec-49c2-83c5-2577634078ef",
   "metadata": {},
   "source": [
    "<h3><center><strong>Resample the <code>station_status</code> dataframe to 4hourly intervals</strong></center></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6f07e90f-c12d-40ef-b6e9-21af71f03cb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problematic Datetime Strings:\n",
      "Series([], Name: last_update, dtype: object)\n"
     ]
    }
   ],
   "source": [
    "# Identify and print out datetime strings with \":08\" error\n",
    "problematic_datetimes = df_station_status[df_station_status['last_update'].str.contains(':08$', na=False)]['last_update']\n",
    "print(\"Problematic Datetime Strings:\")\n",
    "print(problematic_datetimes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3f4209e9-c352-44fc-97da-b5119664a698",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# confirm time_update data type that is assigned to time_update by default\n",
    "df_current_weather['time_update'].dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76b99cd7-5c52-4b06-8785-4879b74b830b",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <h3><strong>Data Preprocessing Steps:</strong></h3>\n",
    "    <ol>\n",
    "        <li>Remove any extra quotation marks from the 'last_update' column.</li>\n",
    "        <li>Drop a specific row identified by the index 664656, likely due to a parsing error.</li>\n",
    "        <li>Convert the 'last_update' column to a datetime index with a specified format.</li>\n",
    "        <li>Define a resampling method called <code>availability_apply</code> that calculates the mean for various bike availability metrics and takes the first status value.</li>\n",
    "        <li>Resample the DataFrame to 4-hourly intervals using the defined resampling method.</li>\n",
    "    </ol>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "e94d6c3f-2595-4be9-a9d7-6af281e51f19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>status</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-04-11 20:00:00</th>\n",
       "      <td>9.770738</td>\n",
       "      <td>21.041803</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.018942</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.811888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 00:00:00</th>\n",
       "      <td>9.644462</td>\n",
       "      <td>21.079454</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>5.963082</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.750401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 04:00:00</th>\n",
       "      <td>9.664451</td>\n",
       "      <td>20.973058</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.168300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.825052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 08:00:00</th>\n",
       "      <td>10.506316</td>\n",
       "      <td>20.047798</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.936497</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.836463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 12:00:00</th>\n",
       "      <td>10.385729</td>\n",
       "      <td>20.383661</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.705274</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.808687</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     total_bikes  empty_stands_number status  \\\n",
       "last_update                                                    \n",
       "2024-04-11 20:00:00     9.770738            21.041803   OPEN   \n",
       "2024-04-12 00:00:00     9.644462            21.079454   OPEN   \n",
       "2024-04-12 04:00:00     9.664451            20.973058   OPEN   \n",
       "2024-04-12 08:00:00    10.506316            20.047798   OPEN   \n",
       "2024-04-12 12:00:00    10.385729            20.383661   OPEN   \n",
       "\n",
       "                     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "last_update                                                                \n",
       "2024-04-11 20:00:00          6.018942                                0.0   \n",
       "2024-04-12 00:00:00          5.963082                                0.0   \n",
       "2024-04-12 04:00:00          6.168300                                0.0   \n",
       "2024-04-12 08:00:00          6.936497                                0.0   \n",
       "2024-04-12 12:00:00          6.705274                                0.0   \n",
       "\n",
       "                     electrical_removable_battery_bikes  \n",
       "last_update                                              \n",
       "2024-04-11 20:00:00                            3.811888  \n",
       "2024-04-12 00:00:00                            3.750401  \n",
       "2024-04-12 04:00:00                            3.825052  \n",
       "2024-04-12 08:00:00                            3.836463  \n",
       "2024-04-12 12:00:00                            3.808687  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove extra quotation marks from 'last_update' column\n",
    "df_station_status['last_update'] = df_station_status['last_update'].str.replace('\"', '')\n",
    "\n",
    "# Drop the row with the parsing error\n",
    "df_station_status.drop(664656, inplace=True)\n",
    "\n",
    "# Convert 'last_update' column to datetime index with adjusted format\n",
    "df_station_status['last_update'] = pd.to_datetime(df_station_status['last_update'], format='%Y-%m-%d %H:%M:%S')\n",
    "df_station_status.set_index('last_update', inplace=True)\n",
    "\n",
    "# Define the resampling method, average\n",
    "availability_apply = {\n",
    "    'total_bikes': 'mean',\n",
    "    'empty_stands_number': 'mean',\n",
    "    'status': 'first',\n",
    "    'mechanical_bikes': 'mean',\n",
    "    'electrical_internal_battery_bikes': 'mean',\n",
    "    'electrical_removable_battery_bikes': 'mean'\n",
    "}\n",
    "\n",
    "# Resample the station_status DataFrame to 4-hourly intervals\n",
    "station_status_resampled = df_station_status.resample('4h').apply(availability_apply)\n",
    "station_status_resampled.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "a16dae65-1945-41ff-8cec-f9235db5dee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "station_number                           0\n",
       "status                                   0\n",
       "empty_stands_number                      0\n",
       "total_bikes                              0\n",
       "mechanical_bikes                         0\n",
       "electrical_internal_battery_bikes        0\n",
       "electrical_removable_battery_bikes       0\n",
       "ratio                                 1292\n",
       "dtype: int64"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for NaN values in df_station\n",
    "station_nan_values = df_station.isna().sum()\n",
    "\n",
    "# Check for NaN values in df_station_status\n",
    "station_status_nan_values = df_station_status.isna().sum()\n",
    "\n",
    "station_nan_values\n",
    "station_status_nan_values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19f49a50-bea0-415b-8706-faecebc52c37",
   "metadata": {},
   "source": [
    "<h3><center><strong>Resample the weather dataframe to 4hourly intervals</strong></center></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "1ef1409c-52f7-49e2-b559-15c82f2bbde6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the data types of columns in the DataFrame\n",
    "#print(df_current_weather.dtypes)\n",
    "#print(df_extreme_weather.dtypes)\n",
    "#print(df_five_day_prediction.dtypes)\n",
    "#print(df_station.dtypes)\n",
    "#print(df_station_status.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "2f03f930-8df7-4ceb-9ffe-e7b3b24d3051",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove quotes from the time_update column for df_extreme_weather\n",
    "df_extreme_weather['time_update'] = df_extreme_weather['time_update'].astype(str).str.replace('\"', '')\n",
    "# Convert the time_update column to datetime for df_extreme_weather with seconds precision\n",
    "df_extreme_weather['time_update'] = pd.to_datetime(df_extreme_weather['time_update'], format='%Y-%m-%d %H:%M:%S').astype('datetime64[s]')\n",
    "\n",
    "# Remove quotes from the time_update column for df_five_day_prediction\n",
    "df_five_day_prediction['time_update'] = df_five_day_prediction['time_update'].astype(str).str.replace('\"', '')\n",
    "# Convert the time_update column to datetime for df_five_day_prediction with seconds precision\n",
    "df_five_day_prediction['time_update'] = pd.to_datetime(df_five_day_prediction['time_update'], format='%Y-%m-%d %H:%M:%S').astype('datetime64[s]')\n",
    "\n",
    "# Remove quotes from the time_update column for df_five_day_prediction\n",
    "df_current_weather['time_update'] = df_current_weather['time_update'].astype(str).str.replace('\"', '')\n",
    "# Convert the time_update column to datetime for df_five_day_prediction with seconds precision\n",
    "df_current_weather['time_update'] = pd.to_datetime(df_current_weather['time_update'], format='%Y-%m-%d %H:%M:%S').astype('datetime64[s]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "e0482547-3851-46b5-9a34-ae7e67335604",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the data types of columns in the DataFrame, to ensure that time_update has been converted to dt format\n",
    "#print(df_current_weather.dtypes)\n",
    "#print(df_extreme_weather.dtypes)\n",
    "#print(df_five_day_prediction.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "14479c1d-794e-46be-b0c4-0156f015285c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the validity of data in df_current_weather\n",
    "#print(df_current_weather.head())\n",
    "#df_current_weather.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3a1c4d0-f8bc-4170-bf64-acb718b2393f",
   "metadata": {},
   "source": [
    "<h3><center><strong>Data Resampling Steps</strong></center></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "90a1b1a6-1afa-48c2-93f5-4a05596bc886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feels_like</th>\n",
       "      <th>temperature_min</th>\n",
       "      <th>temperature_max</th>\n",
       "      <th>weather_description</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_gust</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-04-12 00:00:00</th>\n",
       "      <td>288.850</td>\n",
       "      <td>284.245</td>\n",
       "      <td>294.55</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.76</td>\n",
       "      <td>1.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 04:00:00</th>\n",
       "      <td>285.125</td>\n",
       "      <td>282.535</td>\n",
       "      <td>289.03</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.06</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 08:00:00</th>\n",
       "      <td>283.125</td>\n",
       "      <td>280.975</td>\n",
       "      <td>286.37</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feels_like  temperature_min  temperature_max  \\\n",
       "time_update                                                         \n",
       "2024-04-12 00:00:00     288.850          284.245           294.55   \n",
       "2024-04-12 04:00:00     285.125          282.535           289.03   \n",
       "2024-04-12 08:00:00     283.125          280.975           286.37   \n",
       "\n",
       "                    weather_description  wind_speed  wind_gust  \n",
       "time_update                                                     \n",
       "2024-04-12 00:00:00         \"clear sky\"        2.76       1.35  \n",
       "2024-04-12 04:00:00         \"clear sky\"        2.06       0.00  \n",
       "2024-04-12 08:00:00         \"clear sky\"        0.00       0.00  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the columns and aggregation functions for resampling for table current weather\n",
    "weather_cols = ['time_update', 'feels_like', 'temperature_min', 'temperature_max', 'weather_description', 'wind_speed', 'wind_gust']\n",
    "weather_apply = {\"feels_like\": \"mean\", \"temperature_min\": \"mean\", \"temperature_max\": \"mean\", \"weather_description\": \"first\", \n",
    "                 \"wind_speed\": \"mean\", \"wind_gust\": \"mean\"}\n",
    "\n",
    "# Resample the ExtremeWeather dataframe to 4-hourly intervals\n",
    "df_current_weather_resampled = df_current_weather.resample('4h', on='time_update').apply(weather_apply)\n",
    "\n",
    "# Print the last 3 rows of the resampled dataframe\n",
    "df_current_weather_resampled.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "c38d9a3a-c263-4945-97d6-27865c865409",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the columns and aggregation functions for resampling for table extreme weather\n",
    "weather_cols = ['time_update', 'temp_min', 'temp_max', 'wind_speed', 'gust_speed', 'rain_3h']\n",
    "weather_apply = {\"temp_min\": \"mean\", \"temp_max\": \"mean\", \"wind_speed\": \"mean\", \"gust_speed\": \"mean\", \"rain_3h\": \"mean\"}\n",
    "\n",
    "# Resample the ExtremeWeather dataframe to 4-hourly intervals\n",
    "df_extreme_weather_resampled = df_extreme_weather.resample('4h', on='time_update').apply(weather_apply)\n",
    "\n",
    "# Print the last 3 rows of the resampled dataframe\n",
    "#df_extreme_weather_resampled.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "097f290d-a7d1-4210-9bb7-fb3cb7380ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the columns and aggregation functions for resampling for five day weather prediction\n",
    "weather_cols = ['time_update', 'temp_min', 'temp_max', 'wind_speed', 'gust', 'rain_3h']\n",
    "weather_apply = {\"temp_min\": \"mean\", \"temp_max\": \"mean\", \"wind_speed\": \"mean\", \"gust\": \"mean\", \"rain_3h\": \"mean\"}\n",
    "\n",
    "# Resample the FiveDayPrediction dataframe to 4-hourly intervals\n",
    "df_five_day_prediction_resampled = df_five_day_prediction.resample('4h', on='time_update').apply(weather_apply)\n",
    "\n",
    "# Print the last 3 rows of the resampled dataframe\n",
    "#df_five_day_prediction_resampled.tail(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "33f0ee1c-9947-4ca3-aebb-5b0507564787",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(292, 5)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Confirm the shape of weather dataframes\n",
    "df_extreme_weather_resampled.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "1c0196f5-f439-47a3-b5b3-700b5973f96e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(262, 6)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_current_weather_resampled.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "d9762c58-45ac-416e-b336-5d524636006f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(292, 5)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_five_day_prediction_resampled.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "08ca468e-5c92-4ae2-996f-119f8a56f06e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the index of station_status to datetime in seconds with the specified format\n",
    "df_station_status.index = pd.to_datetime(df_station_status.index, format='%Y-%m-%d %H:%M:%S').astype('datetime64[s]')\n",
    "\n",
    "# Print the first few rows to verify the conversion\n",
    "#df_station_status.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e63852e-e896-4095-bf36-afe440da5dd6",
   "metadata": {},
   "source": [
    "<h3><center><strong>Merge all <code>weather</code> and <code>station status</code> dataframe by index (last_update & time_update)</strong></center></h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d28cd28-f886-403c-acf3-62119310058d",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <h3><strong>Merge Operation:</strong></h3>\n",
    "    <p>This code snippet performs a merge operation between two DataFrames, <code>df_station_status</code> and <code>df_current_weather</code>, based on their respective <code>'last_update'</code> and <code>'time_update'</code> columns. It uses the <code>merge_asof</code> function from pandas, which merges the DataFrames on the nearest key columns within a specified tolerance. Here, the tolerance is set to 5 minutes.</p>\n",
    "    <p>After merging, rows with missing values are dropped, and the resulting DataFrame is displayed, showing the first few rows.</p>\n",
    "</iv>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "b5a50f26-428c-4563-b1a2-ca40ab576de9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>feels_like</th>\n",
       "      <th>temperature_min</th>\n",
       "      <th>temperature_max</th>\n",
       "      <th>weather_description</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_gust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>811</th>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>285.005</td>\n",
       "      <td>283.465</td>\n",
       "      <td>287.795</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.86</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>812</th>\n",
       "      <td>69</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>285.005</td>\n",
       "      <td>283.465</td>\n",
       "      <td>287.795</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.86</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>813</th>\n",
       "      <td>30</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>285.005</td>\n",
       "      <td>283.465</td>\n",
       "      <td>287.795</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.86</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>814</th>\n",
       "      <td>12</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>285.005</td>\n",
       "      <td>283.465</td>\n",
       "      <td>287.795</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.86</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>51</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>34.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>285.005</td>\n",
       "      <td>283.465</td>\n",
       "      <td>287.795</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.86</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     station_number status  empty_stands_number  total_bikes  \\\n",
       "811              63   OPEN                 31.0          4.0   \n",
       "812              69   OPEN                 36.0          4.0   \n",
       "813              30   OPEN                 17.0          3.0   \n",
       "814              12   OPEN                  1.0         19.0   \n",
       "815              51   OPEN                 34.0          6.0   \n",
       "\n",
       "     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "811               0.0                                0.0   \n",
       "812               2.0                                0.0   \n",
       "813               0.0                                0.0   \n",
       "814              13.0                                0.0   \n",
       "815               3.0                                0.0   \n",
       "\n",
       "     electrical_removable_battery_bikes  feels_like  temperature_min  \\\n",
       "811                                 4.0     285.005          283.465   \n",
       "812                                 2.0     285.005          283.465   \n",
       "813                                 3.0     285.005          283.465   \n",
       "814                                 6.0     285.005          283.465   \n",
       "815                                 3.0     285.005          283.465   \n",
       "\n",
       "     temperature_max weather_description  wind_speed  wind_gust  \n",
       "811          287.795         \"clear sky\"        3.86        0.0  \n",
       "812          287.795         \"clear sky\"        3.86        0.0  \n",
       "813          287.795         \"clear sky\"        3.86        0.0  \n",
       "814          287.795         \"clear sky\"        3.86        0.0  \n",
       "815          287.795         \"clear sky\"        3.86        0.0  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the tolerance as a timedelta representing 5 minutes\n",
    "tol = pd.Timedelta(minutes=5)\n",
    "\n",
    "# Perform the merge based on the last_update and time_update columns\n",
    "df_combined_current = pd.merge_asof(left=df_station_status.sort_values('last_update'), \n",
    "                            right=df_current_weather_resampled.sort_values('time_update'), \n",
    "                            left_on='last_update', right_on='time_update',\n",
    "                            direction='nearest', tolerance=tol)\n",
    "\n",
    "# Drop rows with NaN values\n",
    "df_combined_current.dropna(inplace=True)\n",
    "\n",
    "# Display the first few rows of the resulting DataFrame\n",
    "df_combined_current.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f9d3db9-7e0d-4c06-8bc8-ade5e2ba8e38",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <h3><strong>Predictive Analysis:</strong></h3>\n",
    "    <p>Based on the provided DataFrame columns, various aspects of prediction will be considered related to bike station availability and weather conditions.</p>\n",
    "    <ol>\n",
    "        <li><strong>Station Availability Prediction:</strong> Can be used to predict the availability of bikes at each station based on features like 'status', 'empty_stands_number', 'total_bikes', 'mechanical_bikes', and 'electrical_bikes'. For example, can predict the likelihood of a station running out of bikes or having available slots for parking bikes.</li>\n",
    "        <li><strong>Weather Impact Prediction:</strong> Can be used to predict how weather conditions (temperature, wind speed, gust speed, rain) might impact bike usage and station availability. For instance, you can predict whether bike usage increases or decreases during certain weather conditions, such as rainy days or extreme temperatures.</li>\n",
    "        <li><strong>Time-based Trends Prediction:</strong> Using the 'time_update' column, we can analyze time-based trends and make predictions regarding peak hours for bike rentals, station usage patterns throughout the day or week, and how these patterns correlate with weather conditions.</li>\n",
    "        <li><strong>Extreme Weather Impact Prediction:</strong> With the 'extreme_weather_id' column, we can predict the impact of extreme weather events on bike station usage. For example, to predict how stations might be affected during storms, heatwaves, or other extreme weather conditions.</li>\n",
    "    </ol>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "befa37a7-6028-4e1c-93b0-a0809a1e0206",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# Convert the index of station_status to datetime in seconds with the specified format\n",
    "df_station_status.index = pd.to_datetime(df_station_status.index, format='%Y-%m-%d %H:%M:%S').astype('datetime64[s]')\n",
    "\n",
    "# Print the first few rows to verify the conversion\n",
    "df_station_status.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73a1accc-bdea-45e6-9680-163bd3803cdb",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The code snippets below performs a merge operation between two DataFrames, <code>df_station_status</code> and <code>df_extreme_weather</code>, based on their respective 'last_update' and 'time_update' columns.</p>\n",
    "    <p>Using the <code>merge_asof</code> function from pandas with a specified tolerance of 5 minutes, it merges the DataFrames based on the nearest key columns.</p>\n",
    "    <p>After merging, rows with NaN values are dropped, and the resulting DataFrame <code>df_combined_extreme</code> is displayed, showing the first few rows.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "b53781f8-0479-4c64-b16b-d4e6cedb8418",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>temp_min</th>\n",
       "      <th>temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>gust_speed</th>\n",
       "      <th>rain_3h</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>811</th>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>284.898333</td>\n",
       "      <td>288.026667</td>\n",
       "      <td>1.995</td>\n",
       "      <td>2.535</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>812</th>\n",
       "      <td>69</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>284.898333</td>\n",
       "      <td>288.026667</td>\n",
       "      <td>1.995</td>\n",
       "      <td>2.535</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>813</th>\n",
       "      <td>30</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>284.898333</td>\n",
       "      <td>288.026667</td>\n",
       "      <td>1.995</td>\n",
       "      <td>2.535</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>814</th>\n",
       "      <td>12</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>284.898333</td>\n",
       "      <td>288.026667</td>\n",
       "      <td>1.995</td>\n",
       "      <td>2.535</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>51</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>34.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>284.898333</td>\n",
       "      <td>288.026667</td>\n",
       "      <td>1.995</td>\n",
       "      <td>2.535</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     station_number status  empty_stands_number  total_bikes  \\\n",
       "811              63   OPEN                 31.0          4.0   \n",
       "812              69   OPEN                 36.0          4.0   \n",
       "813              30   OPEN                 17.0          3.0   \n",
       "814              12   OPEN                  1.0         19.0   \n",
       "815              51   OPEN                 34.0          6.0   \n",
       "\n",
       "     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "811               0.0                                0.0   \n",
       "812               2.0                                0.0   \n",
       "813               0.0                                0.0   \n",
       "814              13.0                                0.0   \n",
       "815               3.0                                0.0   \n",
       "\n",
       "     electrical_removable_battery_bikes    temp_min    temp_max  wind_speed  \\\n",
       "811                                 4.0  284.898333  288.026667       1.995   \n",
       "812                                 2.0  284.898333  288.026667       1.995   \n",
       "813                                 3.0  284.898333  288.026667       1.995   \n",
       "814                                 6.0  284.898333  288.026667       1.995   \n",
       "815                                 3.0  284.898333  288.026667       1.995   \n",
       "\n",
       "     gust_speed  rain_3h  \n",
       "811       2.535      0.0  \n",
       "812       2.535      0.0  \n",
       "813       2.535      0.0  \n",
       "814       2.535      0.0  \n",
       "815       2.535      0.0  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the tolerance as a timedelta representing 5 minutes\n",
    "tol = pd.Timedelta(minutes=5)\n",
    "\n",
    "# Perform the merge based on the last_update and time_update columns\n",
    "df_combined_extreme = pd.merge_asof(left=df_station_status.sort_values('last_update'), \n",
    "                            right=df_extreme_weather_resampled.sort_values('time_update'), \n",
    "                            left_on='last_update', right_on='time_update',\n",
    "                            direction='nearest', tolerance=tol)\n",
    "\n",
    "# Drop rows with NaN values\n",
    "df_combined_extreme.dropna(inplace=True)\n",
    "\n",
    "# Display the first few rows of the resulting DataFrame\n",
    "df_combined_extreme.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "3a1374bb-4f4d-462e-9a7c-46d5347a25c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>temp_min</th>\n",
       "      <th>temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain_3h</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>811</th>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>284.3025</td>\n",
       "      <td>287.9525</td>\n",
       "      <td>1.885</td>\n",
       "      <td>2.33</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>812</th>\n",
       "      <td>69</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>284.3025</td>\n",
       "      <td>287.9525</td>\n",
       "      <td>1.885</td>\n",
       "      <td>2.33</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>813</th>\n",
       "      <td>30</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>284.3025</td>\n",
       "      <td>287.9525</td>\n",
       "      <td>1.885</td>\n",
       "      <td>2.33</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>814</th>\n",
       "      <td>12</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>284.3025</td>\n",
       "      <td>287.9525</td>\n",
       "      <td>1.885</td>\n",
       "      <td>2.33</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>51</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>34.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>284.3025</td>\n",
       "      <td>287.9525</td>\n",
       "      <td>1.885</td>\n",
       "      <td>2.33</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     station_number status  empty_stands_number  total_bikes  \\\n",
       "811              63   OPEN                 31.0          4.0   \n",
       "812              69   OPEN                 36.0          4.0   \n",
       "813              30   OPEN                 17.0          3.0   \n",
       "814              12   OPEN                  1.0         19.0   \n",
       "815              51   OPEN                 34.0          6.0   \n",
       "\n",
       "     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "811               0.0                                0.0   \n",
       "812               2.0                                0.0   \n",
       "813               0.0                                0.0   \n",
       "814              13.0                                0.0   \n",
       "815               3.0                                0.0   \n",
       "\n",
       "     electrical_removable_battery_bikes  temp_min  temp_max  wind_speed  gust  \\\n",
       "811                                 4.0  284.3025  287.9525       1.885  2.33   \n",
       "812                                 2.0  284.3025  287.9525       1.885  2.33   \n",
       "813                                 3.0  284.3025  287.9525       1.885  2.33   \n",
       "814                                 6.0  284.3025  287.9525       1.885  2.33   \n",
       "815                                 3.0  284.3025  287.9525       1.885  2.33   \n",
       "\n",
       "     rain_3h  \n",
       "811      0.0  \n",
       "812      0.0  \n",
       "813      0.0  \n",
       "814      0.0  \n",
       "815      0.0  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the tolerance as a timedelta representing 5 minutes\n",
    "tol = pd.Timedelta(minutes=5)\n",
    "\n",
    "# Perform the merge based on the last_update and time_update columns\n",
    "df_combined_five_day = pd.merge_asof(left=df_station_status.sort_values('last_update'), \n",
    "                            right=df_five_day_prediction_resampled.sort_values('time_update'), \n",
    "                            left_on='last_update', right_on='time_update',\n",
    "                            direction='nearest', tolerance=tol)\n",
    "\n",
    "# Drop rows with NaN values\n",
    "df_combined_five_day.dropna(inplace=True)\n",
    "\n",
    "# Display the first few rows of the resulting DataFrame\n",
    "df_combined_five_day.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45f20bcc-6416-466d-af87-6652f3416f9e",
   "metadata": {},
   "source": [
    "<p>From the table definitions, we can identify the following features as continuous and categorical:</p>\n",
    "<div>\n",
    "    <h3><strong>Continuous Features:</strong></h3>\n",
    "    <ol>\n",
    "        <li><strong>Feels Like:</strong> From the CurrentWeather table.</li>\n",
    "        <li><strong>Temperature Min:</strong> From the CurrentWeather and ExtremeWeather tables.</li>\n",
    "        <li><strong>Temperature Max:</strong> From the CurrentWeather and ExtremeWeather tables.</li>\n",
    "        <li><strong>Wind Speed:</strong> From all three tables (CurrentWeather, ExtremeWeather, FiveDayPrediction).</li>\n",
    "        <li><strong>Wind Gust:</strong> From the CurrentWeather and ExtremeWeather tables.</li>\n",
    "        <li><strong>Rain 3h:</strong> From the ExtremeWeather and FiveDayPrediction tables.</li>\n",
    "    </ol>\n",
    "    <h3><strong>Categorical Features:</strong></h3>\n",
    "    <ol>\n",
    "        <li><strong>Weather Description:</strong> From the CurrentWeather table. This could include categorical descriptions such as \"sunny\", \"cloudy\", \"rainy\", etc.</li>\n",
    "        <li><strong>Status:</strong> From the StationStatus table. This could include categorical statuses such as \"OPEN\", \"CLOSED\", etc.</li>\n",
    "        <li><strong>Station Name:</strong> From the Station table. This is a categorical identifier for each station.</li>\n",
    "        <li><strong>Address:</strong> From the Station table. This is a categorical feature representing the address of each station.</li>\n",
    "        <li><strong>Banking:</strong> From the Station table. This is a categorical feature indicating whether banking services are available at each station (binary categorical).</li>\n",
    "        <li><strong>Bonus:</strong> From the Station table. This is a categorical feature indicating whether bonus services are available at each station (binary categorical).</li>\n",
    "    </ol>\n",
    "    <p>These features can be used to build predictive models or analyze relationships between various attributes in the dataset.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f6669d1-7124-4813-aecf-5d1e0b8c79ac",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>This code selects specific columns from three different DataFrames representing current weather, extreme weather, and five-day weather predictions. It concatenates these columns into a single DataFrame and calculates the correlation matrix to understand the relationships between different weather variables.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cb06c93-ffba-4fd3-ba83-9a237d5247c4",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The correlation matrix provides insights into the relationships between different variables. Looking at the diagonal, we see that each variable has a perfect correlation with itself (1.0). Regarding off-diagonal elements, positive values indicate a positive correlation, while negative values suggest a negative correlation.</p>\n",
    "    <p>For example:</p>\n",
    "    <ul>\n",
    "        <li>The temperature-related variables (feels_like, temperature_min, temperature_max) show strong positive correlations with each other, indicating that they tend to move together.</li>\n",
    "        <li>Wind_speed and gust_speed also exhibit a positive correlation, albeit weaker compared to the temperature-related variables.</li>\n",
    "        <li>Rain_3h doesn't show a strong correlation with any of the other variables, except for a moderate positive correlation with gust_speed.</li>\n",
    "    </ul>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "1497e429-412b-4239-b297-2786d8f0cec2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between Temperature Min and Wind Speed: 0.17313027050460086\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between Temperature Max and Wind Speed: 0.08728393435446878\n"
     ]
    }
   ],
   "source": [
    "# Create scatterplot for Temperature Min vs Wind Speed\n",
    "plt.figure(figsize=(6, 5))\n",
    "plt.scatter(df_current_weather_resampled['temperature_min'], df_current_weather_resampled['wind_speed'], alpha=0.5)\n",
    "plt.title('Temperature Min vs Wind Speed')\n",
    "plt.xlabel('Temperature Min')\n",
    "plt.ylabel('Wind Speed')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Calculate correlation between Temperature Min and Wind Speed\n",
    "corr_temp_min_wind_speed = df_current_weather_resampled['temperature_min'].corr(df_current_weather_resampled['wind_speed'])\n",
    "print(\"Correlation between Temperature Min and Wind Speed:\", corr_temp_min_wind_speed)\n",
    "\n",
    "# Create scatterplot for Temperature Max vs Wind Speed\n",
    "plt.figure(figsize=(6, 5))\n",
    "plt.scatter(df_current_weather_resampled['temperature_max'], df_current_weather_resampled['wind_speed'], alpha=0.5)\n",
    "plt.title('Temperature Max vs Wind Speed')\n",
    "plt.xlabel('Temperature Max')\n",
    "plt.ylabel('Wind Speed')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Calculate correlation between Temperature Max and Wind Speed\n",
    "corr_temp_max_wind_speed = df_current_weather_resampled['temperature_max'].corr(df_current_weather_resampled['wind_speed'])\n",
    "print(\"Correlation between Temperature Max and Wind Speed:\", corr_temp_max_wind_speed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e8f1604-d897-4eff-a44f-4da9f5664747",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The correlation value between Temperature Max and Wind Speed is approximately <strong>0.1731</strong>. This indicates a weak positive correlation between these two variables, suggesting that as the maximum temperature increases, the wind speed tends to slightly increase as well. However, the correlation is relatively low, indicating that the relationship between these variables is not very strong.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1db0dc0-4e8a-4d03-9851-1478b9ae1d70",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>A correlation coefficient of approximately <strong>0.0873</strong> suggests a weak positive correlation between Temperature Min and Wind Speed. This indicates that as Temperature Min increases, Wind Speed tends to increase slightly, and vice versa. However, the strength of this relationship is relatively low, indicating that the two variables do not have a strong linear association.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12068295-243e-476a-a4d4-400681a5ecb5",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>For linear regression,weu can start by including all continuous features and relevant categorical features as predictors inther model.</p>\n",
    "    <p>Prioritize continuous features like <strong>Feels Like</strong>, <strong>Temperature Min</strong>, <strong>Temperature Max</strong>, <strong>Wind Speed</strong>, <strong>Wind Gust</strong>, and <strong>Rain 3h</strong>, as these directly relate to weather conditions that can influence bike and station availability.</p>\n",
    "    <p>Among categorical features, <strong>Weather Description</strong> and <strong>Station Name</strong> are likely to be the most informative, followed by <strong>Status</strong> and <strong>Banking</strong>.</p>\n",
    "    <p><strong>Address</strong> and <strong>Bonus</strong> may provide additional context but might not be as directly related to bike and station availability.</p>\n",
    "    <p>By including these featurethe your linear regression mowe, you can analyze their relationships with bike and station availability and make predictions based on weather conditions and other relevant factors.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78f1ba3c-27f4-41fb-9c64-baaaf77f9186",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The code below performs several data preprocessing and transformation steps on different DataFrames.</p>\n",
    "    <ol>\n",
    "        <li>\n",
    "            <p><strong>Extracting Day, Hour, and Week:</strong> The code extracts day, hour, and week information from the 'time_update' column of two DataFrames, <code>df_current_weather</code> and <code>df_five_day_prediction</code>. This information is important for time-based analysis and segmentation.</p>\n",
    "        </li>\n",
    "        <li>\n",
    "            <p><strong>Calculating Ratio:</strong> It calculates the ratio between certain values in the DataFrame <code>df_station_status</code>. This ratio represents a metric related to station availability or usage.</p>\n",
    "        </li>\n",
    "        <li>\n",
    "            <p><strong>Calculating Period:</strong> The code defines a function to calculate a period based on the hour and minute values extracted earlier. This period represents discrete time intervals within a day, divided into 10-minute segments. The \"period\" calculated in this code assigns each timestamp in the 'hour' column to a specific period based on the hour and minute values. This discretization allows for the analysis of time-based patterns and trends within smaller time intervals, enabling more granular insights into the data.</p>\n",
    "        </li>\n",
    "        <li>\n",
    "            <p><strong>Applying the Period Calculation:</strong> The calculated period is applied to both <code>df_current_weather</code> and <code>df_five_day_prediction</code> DataFrames, providing a time-based segmentation that allows for more granular analysis of temporal patterns and trends.</p>\n",
    "        </li>\n",
    "        <li>\n",
    "            <p><strong>Displaying DataFrames:</strong> Finally, the code displays the modified DataFrames <code>df_current_weather</code>, <code>df_five_day_prediction</code>, and <code>df_station_status</code> to show the new columns and the results of the preprocessing steps.</p>\n",
    "        </li>\n",
    "    </ol>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "d0490f9a-c06a-4fff-bcea-243be8df381f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_current_weather_hdw:\n",
      "                     feels_like  temperature_min  temperature_max  \\\n",
      "time_update                                                         \n",
      "2024-02-28 20:00:00  289.977143       287.687143       293.941429   \n",
      "2024-02-29 00:00:00  285.005000       283.465000       287.795000   \n",
      "2024-02-29 04:00:00  281.405000       280.620000       284.805000   \n",
      "2024-02-29 08:00:00  282.015000       279.475000       284.525000   \n",
      "2024-02-29 12:00:00  281.720000       281.420000       284.930000   \n",
      "...                         ...              ...              ...   \n",
      "2024-04-11 16:00:00  294.240000       289.090000       298.810000   \n",
      "2024-04-11 20:00:00  297.593333       289.070000       302.753333   \n",
      "2024-04-12 00:00:00  288.850000       284.245000       294.550000   \n",
      "2024-04-12 04:00:00  285.125000       282.535000       289.030000   \n",
      "2024-04-12 08:00:00  283.125000       280.975000       286.370000   \n",
      "\n",
      "                    weather_description  wind_speed  wind_gust  day      hour  \\\n",
      "time_update                                                                     \n",
      "2024-02-28 20:00:00         \"clear sky\"    2.490000   0.447143   28  20:00:00   \n",
      "2024-02-29 00:00:00         \"clear sky\"    3.860000   0.000000   29  00:00:00   \n",
      "2024-02-29 04:00:00         \"clear sky\"    2.680000   1.560000   29  04:00:00   \n",
      "2024-02-29 08:00:00     \"broken clouds\"    0.445000   2.235000   29  08:00:00   \n",
      "2024-02-29 12:00:00  \"scattered clouds\"    2.245000   1.565000   29  12:00:00   \n",
      "...                                 ...         ...        ...  ...       ...   \n",
      "2024-04-11 16:00:00        \"few clouds\"    0.830000   0.440000   11  16:00:00   \n",
      "2024-04-11 20:00:00         \"clear sky\"    4.196667   0.383333   11  20:00:00   \n",
      "2024-04-12 00:00:00         \"clear sky\"    2.760000   1.350000   12  00:00:00   \n",
      "2024-04-12 04:00:00         \"clear sky\"    2.060000   0.000000   12  04:00:00   \n",
      "2024-04-12 08:00:00         \"clear sky\"    0.000000   0.000000   12  08:00:00   \n",
      "\n",
      "                     week  \n",
      "time_update                \n",
      "2024-02-28 20:00:00     9  \n",
      "2024-02-29 00:00:00     9  \n",
      "2024-02-29 04:00:00     9  \n",
      "2024-02-29 08:00:00     9  \n",
      "2024-02-29 12:00:00     9  \n",
      "...                   ...  \n",
      "2024-04-11 16:00:00    15  \n",
      "2024-04-11 20:00:00    15  \n",
      "2024-04-12 00:00:00    15  \n",
      "2024-04-12 04:00:00    15  \n",
      "2024-04-12 08:00:00    15  \n",
      "\n",
      "[262 rows x 9 columns]\n",
      "df_five_day_prediction_hdw:\n",
      "                       temp_min    temp_max  wind_speed       gust  rain_3h  \\\n",
      "time_update                                                                   \n",
      "2024-02-29 00:00:00  284.302500  287.952500    1.885000   2.330000      0.0   \n",
      "2024-02-29 04:00:00  281.966000  283.780000    1.318000   1.474000      0.0   \n",
      "2024-02-29 08:00:00  282.140000  282.740000    1.688333   2.523333      0.0   \n",
      "2024-02-29 12:00:00  282.068750  282.126250    2.927500   7.270000      0.0   \n",
      "2024-02-29 16:00:00  284.475000  284.842000    5.144000  11.507000      0.0   \n",
      "...                         ...         ...         ...        ...      ...   \n",
      "2024-04-16 20:00:00  292.135000  292.135000    3.008750   2.327500      0.0   \n",
      "2024-04-17 00:00:00  286.840909  286.840909    2.430000   2.776364      0.0   \n",
      "2024-04-17 04:00:00  281.225000  281.225000    1.152500   1.160000      0.0   \n",
      "2024-04-17 08:00:00  280.250000  280.250000    0.760000   0.650000      0.0   \n",
      "2024-04-17 12:00:00  280.090000  280.090000    1.320000   1.140000      0.0   \n",
      "\n",
      "                     day      hour  week  \n",
      "time_update                               \n",
      "2024-02-29 00:00:00   29  00:00:00     9  \n",
      "2024-02-29 04:00:00   29  04:00:00     9  \n",
      "2024-02-29 08:00:00   29  08:00:00     9  \n",
      "2024-02-29 12:00:00   29  12:00:00     9  \n",
      "2024-02-29 16:00:00   29  16:00:00     9  \n",
      "...                  ...       ...   ...  \n",
      "2024-04-16 20:00:00   16  20:00:00    16  \n",
      "2024-04-17 00:00:00   17  00:00:00    16  \n",
      "2024-04-17 04:00:00   17  04:00:00    16  \n",
      "2024-04-17 08:00:00   17  08:00:00    16  \n",
      "2024-04-17 12:00:00   17  12:00:00    16  \n",
      "\n",
      "[292 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create copies of the original DataFrames\n",
    "df_current_weather_hdw = df_current_weather_resampled.copy()\n",
    "df_five_day_prediction_hdw = df_five_day_prediction_resampled.copy()\n",
    "\n",
    "# Extracting day, hour, and week from df_current_weather_resampled\n",
    "df_current_weather_hdw['day'] = df_current_weather_hdw.index.day\n",
    "df_current_weather_hdw['hour'] = df_current_weather_hdw.index.strftime('%H:%M:%S')\n",
    "df_current_weather_hdw['week'] = df_current_weather_hdw.index.isocalendar().week\n",
    "\n",
    "# Displaying df_current_weather_hdw with the new columns\n",
    "print(\"df_current_weather_hdw:\")\n",
    "print(df_current_weather_hdw)\n",
    "\n",
    "# Extracting day, hour, and week from df_five_day_prediction_resampled\n",
    "df_five_day_prediction_hdw['day'] = df_five_day_prediction_hdw.index.day\n",
    "df_five_day_prediction_hdw['hour'] = df_five_day_prediction_hdw.index.strftime('%H:%M:%S')\n",
    "df_five_day_prediction_hdw['week'] = df_five_day_prediction_hdw.index.isocalendar().week\n",
    "\n",
    "# Displaying df_five_day_prediction_hdw with the new columns\n",
    "print(\"df_five_day_prediction_hdw:\")\n",
    "print(df_five_day_prediction_hdw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "10d3741f-f6b1-40e1-82d9-5705e7037170",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feels_like</th>\n",
       "      <th>temperature_min</th>\n",
       "      <th>temperature_max</th>\n",
       "      <th>weather_description</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_gust</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>week</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-02-28 20:00:00</th>\n",
       "      <td>289.977143</td>\n",
       "      <td>287.687143</td>\n",
       "      <td>293.941429</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.490000</td>\n",
       "      <td>0.447143</td>\n",
       "      <td>28</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-29 00:00:00</th>\n",
       "      <td>285.005000</td>\n",
       "      <td>283.465000</td>\n",
       "      <td>287.795000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>3.860000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>29</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-29 04:00:00</th>\n",
       "      <td>281.405000</td>\n",
       "      <td>280.620000</td>\n",
       "      <td>284.805000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.680000</td>\n",
       "      <td>1.560000</td>\n",
       "      <td>29</td>\n",
       "      <td>04:00:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-29 08:00:00</th>\n",
       "      <td>282.015000</td>\n",
       "      <td>279.475000</td>\n",
       "      <td>284.525000</td>\n",
       "      <td>\"broken clouds\"</td>\n",
       "      <td>0.445000</td>\n",
       "      <td>2.235000</td>\n",
       "      <td>29</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-02-29 12:00:00</th>\n",
       "      <td>281.720000</td>\n",
       "      <td>281.420000</td>\n",
       "      <td>284.930000</td>\n",
       "      <td>\"scattered clouds\"</td>\n",
       "      <td>2.245000</td>\n",
       "      <td>1.565000</td>\n",
       "      <td>29</td>\n",
       "      <td>12:00:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-11 16:00:00</th>\n",
       "      <td>294.240000</td>\n",
       "      <td>289.090000</td>\n",
       "      <td>298.810000</td>\n",
       "      <td>\"few clouds\"</td>\n",
       "      <td>0.830000</td>\n",
       "      <td>0.440000</td>\n",
       "      <td>11</td>\n",
       "      <td>16:00:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-11 20:00:00</th>\n",
       "      <td>297.593333</td>\n",
       "      <td>289.070000</td>\n",
       "      <td>302.753333</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>4.196667</td>\n",
       "      <td>0.383333</td>\n",
       "      <td>11</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 00:00:00</th>\n",
       "      <td>288.850000</td>\n",
       "      <td>284.245000</td>\n",
       "      <td>294.550000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.760000</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>12</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 04:00:00</th>\n",
       "      <td>285.125000</td>\n",
       "      <td>282.535000</td>\n",
       "      <td>289.030000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>2.060000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>04:00:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-12 08:00:00</th>\n",
       "      <td>283.125000</td>\n",
       "      <td>280.975000</td>\n",
       "      <td>286.370000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>262 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feels_like  temperature_min  temperature_max  \\\n",
       "time_update                                                         \n",
       "2024-02-28 20:00:00  289.977143       287.687143       293.941429   \n",
       "2024-02-29 00:00:00  285.005000       283.465000       287.795000   \n",
       "2024-02-29 04:00:00  281.405000       280.620000       284.805000   \n",
       "2024-02-29 08:00:00  282.015000       279.475000       284.525000   \n",
       "2024-02-29 12:00:00  281.720000       281.420000       284.930000   \n",
       "...                         ...              ...              ...   \n",
       "2024-04-11 16:00:00  294.240000       289.090000       298.810000   \n",
       "2024-04-11 20:00:00  297.593333       289.070000       302.753333   \n",
       "2024-04-12 00:00:00  288.850000       284.245000       294.550000   \n",
       "2024-04-12 04:00:00  285.125000       282.535000       289.030000   \n",
       "2024-04-12 08:00:00  283.125000       280.975000       286.370000   \n",
       "\n",
       "                    weather_description  wind_speed  wind_gust  day      hour  \\\n",
       "time_update                                                                     \n",
       "2024-02-28 20:00:00         \"clear sky\"    2.490000   0.447143   28  20:00:00   \n",
       "2024-02-29 00:00:00         \"clear sky\"    3.860000   0.000000   29  00:00:00   \n",
       "2024-02-29 04:00:00         \"clear sky\"    2.680000   1.560000   29  04:00:00   \n",
       "2024-02-29 08:00:00     \"broken clouds\"    0.445000   2.235000   29  08:00:00   \n",
       "2024-02-29 12:00:00  \"scattered clouds\"    2.245000   1.565000   29  12:00:00   \n",
       "...                                 ...         ...        ...  ...       ...   \n",
       "2024-04-11 16:00:00        \"few clouds\"    0.830000   0.440000   11  16:00:00   \n",
       "2024-04-11 20:00:00         \"clear sky\"    4.196667   0.383333   11  20:00:00   \n",
       "2024-04-12 00:00:00         \"clear sky\"    2.760000   1.350000   12  00:00:00   \n",
       "2024-04-12 04:00:00         \"clear sky\"    2.060000   0.000000   12  04:00:00   \n",
       "2024-04-12 08:00:00         \"clear sky\"    0.000000   0.000000   12  08:00:00   \n",
       "\n",
       "                     week  \n",
       "time_update                \n",
       "2024-02-28 20:00:00     9  \n",
       "2024-02-29 00:00:00     9  \n",
       "2024-02-29 04:00:00     9  \n",
       "2024-02-29 08:00:00     9  \n",
       "2024-02-29 12:00:00     9  \n",
       "...                   ...  \n",
       "2024-04-11 16:00:00    15  \n",
       "2024-04-11 20:00:00    15  \n",
       "2024-04-12 00:00:00    15  \n",
       "2024-04-12 04:00:00    15  \n",
       "2024-04-12 08:00:00    15  \n",
       "\n",
       "[262 rows x 9 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_current_weather_hdw"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c62cb420-03e0-4c2a-863f-68de5a5ad81d",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The ratio calculated in this context indicates the relationship between the available resources and the demand for those resources at a given station.</p>\n",
    "    <p>In particular:</p>\n",
    "    <ul>\n",
    "        <li><strong>Empty Stands and Total Bikes</strong> represent the available resources at the station.</li>\n",
    "        <li><strong>Mechanical Bikes, Electrical Internal Battery Bikes, and Electrical Removable Battery Bikes</strong> represent the demand for bikes at the station.</li>\n",
    "    </ul>\n",
    "    <p>The ratio is calculated as:</p>\n",
    "    <div>\n",
    "        <p>Ratio =</p>\n",
    "        <div style=\"text-align: center;\">\n",
    "            <div style=\"display: inline-block; text-align: left;\">\n",
    "                <p>(Empty Stands + Total Bikes)</p>\n",
    "                <p>─────────────────────────</p>\n",
    "                <p>(Mechanical Bikes + Electrical Internal Battery Bikes + Electrical Removable Battery Bikes)</p>\n",
    "            </div>\n",
    "        </div>\n",
    "    </div>\n",
    "    <p>This ratio indicates how balanced the station's supply and demand are. A higher ratio suggests that there are more available resources (empty stands and bikes) relative to the demand for those resources. Conversely, a lower ratio suggests that there is higher demand compared to the available resources, which could indicate potential issues with bike availability or station capacity.</p>\n",
    "    <p>In the provided example:</p>\n",
    "    <ul>\n",
    "        <li>The first row has a ratio of approximately 2.82, indicating that there are almost three available resources (empty stands and bikes) for every bike in demand (mechanical and electrical bikes).</li>\n",
    "        <li>The subsequent rows have higher ratios, indicating even more favorable supply-demand balance.<Thel>\n",
    "    <p>Overall, this ratio provides insights into the station's capacity and the balance between bike availability and demand, which can be useful for managing bike-sharing systems and predicting station vailability.</p>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "9dd30224-6a8f-4684-a156-c78d1a24b434",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time_update\n",
      "2024-02-28 20:00:00    20:00:00\n",
      "2024-02-29 00:00:00    00:00:00\n",
      "2024-02-29 04:00:00    04:00:00\n",
      "2024-02-29 08:00:00    08:00:00\n",
      "2024-02-29 12:00:00    12:00:00\n",
      "                         ...   \n",
      "2024-04-11 16:00:00    16:00:00\n",
      "2024-04-11 20:00:00    20:00:00\n",
      "2024-04-12 00:00:00    00:00:00\n",
      "2024-04-12 04:00:00    04:00:00\n",
      "2024-04-12 08:00:00    08:00:00\n",
      "Freq: 4H, Name: hour, Length: 262, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df_current_weather_hdw['hour'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f0874f2-4864-465b-9789-db6870bf0b51",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The bike stand rati defined belowo provides valuable insights into the availability of bike parking space relative to the total number of bikes at each station, which can be useful for bike-sharing systems in managing bike distribution and station capacity.</p>\n",
    "</di>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60eb0aad-40f6-4298-9e95-a4cad961ec0a",
   "metadata": {},
   "source": [
    "<h3><center><strong>Choose test and training set to evaluate and train model</strong></center></p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14491a6b-2013-4836-bd81-077052dc4274",
   "metadata": {},
   "source": [
    "- Each row and column in the matrix represents a variable in your dataset.\n",
    "- The values in the cells represent the correlation coefficient between the variables. The correlation coefficient ranges from -1 to 1.\n",
    "  - A value of 1 indicates a perfect positive correlation (as one variable increases, the other also increases proportionally).\n",
    "  - A value of -1 indicates a perfect negative correlation (as one variable increases, the other decreases proportionally).\n",
    "  - A value of 0 indicates no correlation between the variables.\n",
    "- The diagonal elements (where the row and column indices are the same) always have a correlation coefficient of 1, as they represent the correlation of a variable with itself.\n",
    "\n",
    "In correlation matrix:\n",
    "- 'empty_stands_number', 'total_bikes', 'mechanical_bikes', 'electrical_removable_battery_bikes', and 'ratio' columns have correlations with each other and themselves.\n",
    "- 'electrical_internal_battery_bikes' has NaN correlation values with other columns because there are no data points for it (i.e., all values are NaN).\n",
    "- The 'ratio' column has moderate correlations with 'empty_stands_number' (0.603446), 'total_bikes' (-0.595262), and 'mechanical_bikes' (-0.553429)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "f1854b08-a9a7-408e-9ac4-70e54421b78a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>empty_stands_number</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.726543</td>\n",
       "      <td>-0.686112</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.608118</td>\n",
       "      <td>0.603446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_bikes</th>\n",
       "      <td>-0.726543</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.938751</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.846009</td>\n",
       "      <td>-0.595262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <td>-0.686112</td>\n",
       "      <td>0.938751</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.611553</td>\n",
       "      <td>-0.553429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <td>-0.608118</td>\n",
       "      <td>0.846009</td>\n",
       "      <td>0.611553</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.491694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio</th>\n",
       "      <td>0.603446</td>\n",
       "      <td>-0.595262</td>\n",
       "      <td>-0.553429</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.491694</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    empty_stands_number  total_bikes  \\\n",
       "empty_stands_number                            1.000000    -0.726543   \n",
       "total_bikes                                   -0.726543     1.000000   \n",
       "mechanical_bikes                              -0.686112     0.938751   \n",
       "electrical_internal_battery_bikes                   NaN          NaN   \n",
       "electrical_removable_battery_bikes            -0.608118     0.846009   \n",
       "ratio                                          0.603446    -0.595262   \n",
       "\n",
       "                                    mechanical_bikes  \\\n",
       "empty_stands_number                        -0.686112   \n",
       "total_bikes                                 0.938751   \n",
       "mechanical_bikes                            1.000000   \n",
       "electrical_internal_battery_bikes                NaN   \n",
       "electrical_removable_battery_bikes          0.611553   \n",
       "ratio                                      -0.553429   \n",
       "\n",
       "                                    electrical_internal_battery_bikes  \\\n",
       "empty_stands_number                                               NaN   \n",
       "total_bikes                                                       NaN   \n",
       "mechanical_bikes                                                  NaN   \n",
       "electrical_internal_battery_bikes                                 NaN   \n",
       "electrical_removable_battery_bikes                                NaN   \n",
       "ratio                                                             NaN   \n",
       "\n",
       "                                    electrical_removable_battery_bikes  \\\n",
       "empty_stands_number                                          -0.608118   \n",
       "total_bikes                                                   0.846009   \n",
       "mechanical_bikes                                              0.611553   \n",
       "electrical_internal_battery_bikes                                  NaN   \n",
       "electrical_removable_battery_bikes                            1.000000   \n",
       "ratio                                                        -0.491694   \n",
       "\n",
       "                                       ratio  \n",
       "empty_stands_number                 0.603446  \n",
       "total_bikes                        -0.595262  \n",
       "mechanical_bikes                   -0.553429  \n",
       "electrical_internal_battery_bikes        NaN  \n",
       "electrical_removable_battery_bikes -0.491694  \n",
       "ratio                               1.000000  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the 'ratio' column\n",
    "df_station_status['ratio'] = (\n",
    "    (df_station_status['empty_stands_number'] + df_station_status['total_bikes']) /\n",
    "    (df_station_status['mechanical_bikes'] + df_station_status['electrical_internal_battery_bikes'] + df_station_status['electrical_removable_battery_bikes'])\n",
    ")\n",
    "\n",
    "columns_for_correlation = ['empty_stands_number', 'total_bikes', 'mechanical_bikes', 'electrical_internal_battery_bikes', 'electrical_removable_battery_bikes', 'ratio']\n",
    "\n",
    "# Calculate correlations for the specified columns\n",
    "correlation_matrix = df_station_status[columns_for_correlation].corr()\n",
    "\n",
    "# Print the correlation matrix\n",
    "#print(correlation_matrix)\n",
    "correlation_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "551dfd34-30b9-448e-95c9-53948fab3668",
   "metadata": {},
   "source": [
    "<p>This output represents the correlation coefficients between the 'bike_stand_ratio' column and other numerical columns ('empty_stands_number' and 'total_bikes') in the dataset. A correlation coefficient of 1.0 indicates a perfect positive correlation, meaning that as the 'empty_stands_number' increases, the 'bike_stand_ratio' also increases, and as the 'total_bikes' increases, the 'bike_stand_ratio' also increases. Conversely, a correlation coefficient of -1.0 indicates a perfect negative correlation, suggesting that as one variable increases, the other decreases. In this case, the 'bike_stand_ratio' has a moderately positive correlation with 'empty_stands_number' (0.603) and a moderately negative correlation with 'total_bikes' (-0.596).</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07d2925b-831f-473f-8034-d4da1485a5a6",
   "metadata": {},
   "source": [
    "<p>The code below ensures that only the 'week' column is used for splitting the data into weekday and weekend subsets, while also filtering for periods greater than or equal to 36. Then, it calculates and prints the correlation coefficients for 'available_bike_ratio' for both weekday and weekend subsets.</p>The value 36 is relevant because it represents a specific time period within a day, corresponding to 6 hours. By filtering for periods greater than or equal to 36, the code ensures that it considers data points that occur after a certain time threshold, which may be indicative of weekday or weekend patterns.</p>\n",
    "<p>For instance, if each period represents 10 minutes, a period value of 36 would correspond to 6 hours (36 * 10 minutes = 360 minutes = 6 hours). This threshold helps differentiate between morning, afternoon, and evening periods, which might exhibit different bike availability patterns during weekdays and weekends.</p>\n",
    "<p>By filtering for periods greater than or equal to 36, the code focuses on data points from midday onwards, which could capture variations in bike availability that are more relevant during the latter part of the day.</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2453acf2-5fa8-4811-8f6a-0af70c525d6e",
   "metadata": {},
   "source": [
    "<ol>\n",
    "    <li><strong>Filtering Weekday and Weekend Data:</strong>\n",
    "        <ul>\n",
    "            <li><code>df_weekday_five_day_predicition</code> and <code>df_weekday_current_weather</code>: This line filters the DataFrame <code>df_five_day_prediction</code> & <code>df_current_weather</code>to include only rows where the 'day_of_week' is less than or equal to 3 (typically representing Monday to Thursday) and where the 'period' is greater than or equal to 36.</li>\n",
    "            <li><code>df_weekend_five_day_prediciton</code> & <code>df_weekend_current_weather</code>: Similarly, filters the DataFrame to include only rows where the 'day_of_week' is greater than 3 (typically representing Friday to Sunday) and where the 'period' is greater than or equal to 36.</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82ac52c0-c98f-4c7a-a738-c77efb89baea",
   "metadata": {},
   "source": [
    "<h3><center><strong>Generate test and training set to evaluate and train model</strong></center></h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3280209-905e-48f3-893b-df47a9c48929",
   "metadata": {},
   "source": [
    "<h3><center><strong>Merge bike/station and weather dataframes</strong></center></h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "45c50726-04d5-4fe1-ac88-8b794a28cad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reset the index of df_station_status\n",
    "df_station_status_reset = df_station_status.reset_index()\n",
    "\n",
    "# Merge the DataFrames based on the station_number and number columns\n",
    "merged_df = pd.merge(df_station_status_reset, df_station, left_on='station_number', right_on='number', how='inner')\n",
    "\n",
    "# Drop the redundant 'number' column from df_station\n",
    "merged_df.drop(columns=['number'], inplace=True)\n",
    "\n",
    "# Display the merged DataFrame\n",
    "#merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "21aa7b47-625d-484e-9459-15b0b1110f62",
   "metadata": {},
   "outputs": [],
   "source": [
    "#merged_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "6086b4c9-e48e-41ec-b7f3-be0d03460ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#merged_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "65cce44e-27eb-4ccd-b51b-ea8c202febe8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data type of the index: datetime64[s]\n"
     ]
    }
   ],
   "source": [
    "index_dtype = df_current_weather_hdw.index.dtype\n",
    "\n",
    "# Print the data type\n",
    "print(\"Data type of the index:\", index_dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "162e97a0-f641-4831-af78-026558f24ba2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feels_like</th>\n",
       "      <th>temperature_min</th>\n",
       "      <th>temperature_max</th>\n",
       "      <th>weather_description</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_gust</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>week</th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-03-01 08:00:00</th>\n",
       "      <td>282.380</td>\n",
       "      <td>281.860000</td>\n",
       "      <td>284.435000</td>\n",
       "      <td>\"overcast clouds\"</td>\n",
       "      <td>2.440000</td>\n",
       "      <td>2.010</td>\n",
       "      <td>1</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>9</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-04 00:00:00</th>\n",
       "      <td>279.720</td>\n",
       "      <td>280.315000</td>\n",
       "      <td>283.975000</td>\n",
       "      <td>mist</td>\n",
       "      <td>4.465000</td>\n",
       "      <td>7.755</td>\n",
       "      <td>4</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-08 08:00:00</th>\n",
       "      <td>279.325</td>\n",
       "      <td>277.180000</td>\n",
       "      <td>283.450000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>0.430000</td>\n",
       "      <td>0.845</td>\n",
       "      <td>8</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>93</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.176471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.450</td>\n",
       "      <td>279.016667</td>\n",
       "      <td>284.183333</td>\n",
       "      <td>\"broken clouds\"</td>\n",
       "      <td>1.713333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>9</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.450</td>\n",
       "      <td>279.016667</td>\n",
       "      <td>284.183333</td>\n",
       "      <td>\"broken clouds\"</td>\n",
       "      <td>1.713333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>9</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feels_like  temperature_min  temperature_max  \\\n",
       "time_update                                                         \n",
       "2024-03-01 08:00:00     282.380       281.860000       284.435000   \n",
       "2024-03-04 00:00:00     279.720       280.315000       283.975000   \n",
       "2024-03-08 08:00:00     279.325       277.180000       283.450000   \n",
       "2024-03-09 08:00:00     280.450       279.016667       284.183333   \n",
       "2024-03-09 08:00:00     280.450       279.016667       284.183333   \n",
       "\n",
       "                    weather_description  wind_speed  wind_gust  day      hour  \\\n",
       "time_update                                                                     \n",
       "2024-03-01 08:00:00   \"overcast clouds\"    2.440000      2.010    1  08:00:00   \n",
       "2024-03-04 00:00:00                mist    4.465000      7.755    4  00:00:00   \n",
       "2024-03-08 08:00:00         \"clear sky\"    0.430000      0.845    8  08:00:00   \n",
       "2024-03-09 08:00:00     \"broken clouds\"    1.713333      0.000    9  08:00:00   \n",
       "2024-03-09 08:00:00     \"broken clouds\"    1.713333      0.000    9  08:00:00   \n",
       "\n",
       "                     week  station_number status  empty_stands_number  \\\n",
       "time_update                                                             \n",
       "2024-03-01 08:00:00     9              48   OPEN                 15.0   \n",
       "2024-03-04 00:00:00    10              48   OPEN                 26.0   \n",
       "2024-03-08 08:00:00    10              93   OPEN                  6.0   \n",
       "2024-03-09 08:00:00    10              23   OPEN                  9.0   \n",
       "2024-03-09 08:00:00    10              63   OPEN                 35.0   \n",
       "\n",
       "                     total_bikes  mechanical_bikes  \\\n",
       "time_update                                          \n",
       "2024-03-01 08:00:00         25.0              14.0   \n",
       "2024-03-04 00:00:00         14.0               7.0   \n",
       "2024-03-08 08:00:00         34.0              23.0   \n",
       "2024-03-09 08:00:00         20.0              12.0   \n",
       "2024-03-09 08:00:00          0.0               0.0   \n",
       "\n",
       "                     electrical_internal_battery_bikes  \\\n",
       "time_update                                              \n",
       "2024-03-01 08:00:00                                0.0   \n",
       "2024-03-04 00:00:00                                0.0   \n",
       "2024-03-08 08:00:00                                0.0   \n",
       "2024-03-09 08:00:00                                0.0   \n",
       "2024-03-09 08:00:00                                0.0   \n",
       "\n",
       "                     electrical_removable_battery_bikes     ratio  \n",
       "time_update                                                        \n",
       "2024-03-01 08:00:00                                11.0  1.600000  \n",
       "2024-03-04 00:00:00                                 7.0  2.857143  \n",
       "2024-03-08 08:00:00                                11.0  1.176471  \n",
       "2024-03-09 08:00:00                                 8.0  1.450000  \n",
       "2024-03-09 08:00:00                                 0.0       inf  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the merge based on the datetime index of both DataFrames\n",
    "merged_df_current_weather_hdw = pd.merge(df_current_weather_hdw, df_station_status, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "# Print the merged DataFrame\n",
    "merged_df_current_weather_hdw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "33a791df-e699-458b-9d04-c570439878fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp_min</th>\n",
       "      <th>temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain_3h</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>week</th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-03-01 08:00:00</th>\n",
       "      <td>282.280556</td>\n",
       "      <td>282.357778</td>\n",
       "      <td>4.927778</td>\n",
       "      <td>10.620000</td>\n",
       "      <td>0.6900</td>\n",
       "      <td>1</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>9</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-04 00:00:00</th>\n",
       "      <td>281.336600</td>\n",
       "      <td>281.401900</td>\n",
       "      <td>3.610300</td>\n",
       "      <td>6.466900</td>\n",
       "      <td>0.7451</td>\n",
       "      <td>4</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-08 08:00:00</th>\n",
       "      <td>280.125500</td>\n",
       "      <td>280.196667</td>\n",
       "      <td>0.497000</td>\n",
       "      <td>0.703333</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>8</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>93</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.176471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.440000</td>\n",
       "      <td>280.541167</td>\n",
       "      <td>1.143333</td>\n",
       "      <td>1.163167</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>9</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.440000</td>\n",
       "      <td>280.541167</td>\n",
       "      <td>1.143333</td>\n",
       "      <td>1.163167</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>9</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>10</td>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       temp_min    temp_max  wind_speed       gust  rain_3h  \\\n",
       "time_update                                                                   \n",
       "2024-03-01 08:00:00  282.280556  282.357778    4.927778  10.620000   0.6900   \n",
       "2024-03-04 00:00:00  281.336600  281.401900    3.610300   6.466900   0.7451   \n",
       "2024-03-08 08:00:00  280.125500  280.196667    0.497000   0.703333   0.0000   \n",
       "2024-03-09 08:00:00  280.440000  280.541167    1.143333   1.163167   0.0000   \n",
       "2024-03-09 08:00:00  280.440000  280.541167    1.143333   1.163167   0.0000   \n",
       "\n",
       "                     day      hour  week  station_number status  \\\n",
       "time_update                                                       \n",
       "2024-03-01 08:00:00    1  08:00:00     9              48   OPEN   \n",
       "2024-03-04 00:00:00    4  00:00:00    10              48   OPEN   \n",
       "2024-03-08 08:00:00    8  08:00:00    10              93   OPEN   \n",
       "2024-03-09 08:00:00    9  08:00:00    10              23   OPEN   \n",
       "2024-03-09 08:00:00    9  08:00:00    10              63   OPEN   \n",
       "\n",
       "                     empty_stands_number  total_bikes  mechanical_bikes  \\\n",
       "time_update                                                               \n",
       "2024-03-01 08:00:00                 15.0         25.0              14.0   \n",
       "2024-03-04 00:00:00                 26.0         14.0               7.0   \n",
       "2024-03-08 08:00:00                  6.0         34.0              23.0   \n",
       "2024-03-09 08:00:00                  9.0         20.0              12.0   \n",
       "2024-03-09 08:00:00                 35.0          0.0               0.0   \n",
       "\n",
       "                     electrical_internal_battery_bikes  \\\n",
       "time_update                                              \n",
       "2024-03-01 08:00:00                                0.0   \n",
       "2024-03-04 00:00:00                                0.0   \n",
       "2024-03-08 08:00:00                                0.0   \n",
       "2024-03-09 08:00:00                                0.0   \n",
       "2024-03-09 08:00:00                                0.0   \n",
       "\n",
       "                     electrical_removable_battery_bikes     ratio  \n",
       "time_update                                                        \n",
       "2024-03-01 08:00:00                                11.0  1.600000  \n",
       "2024-03-04 00:00:00                                 7.0  2.857143  \n",
       "2024-03-08 08:00:00                                11.0  1.176471  \n",
       "2024-03-09 08:00:00                                 8.0  1.450000  \n",
       "2024-03-09 08:00:00                                 0.0       inf  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the merge based on the datetime index of both DataFrames\n",
    "merged_df_five_day_prediction_hdw = pd.merge(df_five_day_prediction_hdw, df_station_status, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "# Print the merged DataFrame\n",
    "merged_df_five_day_prediction_hdw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "427373b3-bf41-4e0a-a48a-f2e8c5354948",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp_min</th>\n",
       "      <th>temp_max</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain_3h</th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-03-01 08:00:00</th>\n",
       "      <td>282.280556</td>\n",
       "      <td>282.357778</td>\n",
       "      <td>4.927778</td>\n",
       "      <td>10.620000</td>\n",
       "      <td>0.6900</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-04 00:00:00</th>\n",
       "      <td>281.336600</td>\n",
       "      <td>281.401900</td>\n",
       "      <td>3.610300</td>\n",
       "      <td>6.466900</td>\n",
       "      <td>0.7451</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-08 08:00:00</th>\n",
       "      <td>280.125500</td>\n",
       "      <td>280.196667</td>\n",
       "      <td>0.497000</td>\n",
       "      <td>0.703333</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>93</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.176471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.440000</td>\n",
       "      <td>280.541167</td>\n",
       "      <td>1.143333</td>\n",
       "      <td>1.163167</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>23</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.440000</td>\n",
       "      <td>280.541167</td>\n",
       "      <td>1.143333</td>\n",
       "      <td>1.163167</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       temp_min    temp_max  wind_speed       gust  rain_3h  \\\n",
       "time_update                                                                   \n",
       "2024-03-01 08:00:00  282.280556  282.357778    4.927778  10.620000   0.6900   \n",
       "2024-03-04 00:00:00  281.336600  281.401900    3.610300   6.466900   0.7451   \n",
       "2024-03-08 08:00:00  280.125500  280.196667    0.497000   0.703333   0.0000   \n",
       "2024-03-09 08:00:00  280.440000  280.541167    1.143333   1.163167   0.0000   \n",
       "2024-03-09 08:00:00  280.440000  280.541167    1.143333   1.163167   0.0000   \n",
       "\n",
       "                     station_number status  empty_stands_number  total_bikes  \\\n",
       "time_update                                                                    \n",
       "2024-03-01 08:00:00              48   OPEN                 15.0         25.0   \n",
       "2024-03-04 00:00:00              48   OPEN                 26.0         14.0   \n",
       "2024-03-08 08:00:00              93   OPEN                  6.0         34.0   \n",
       "2024-03-09 08:00:00              23   OPEN                  9.0         20.0   \n",
       "2024-03-09 08:00:00              63   OPEN                 35.0          0.0   \n",
       "\n",
       "                     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "time_update                                                                \n",
       "2024-03-01 08:00:00              14.0                                0.0   \n",
       "2024-03-04 00:00:00               7.0                                0.0   \n",
       "2024-03-08 08:00:00              23.0                                0.0   \n",
       "2024-03-09 08:00:00              12.0                                0.0   \n",
       "2024-03-09 08:00:00               0.0                                0.0   \n",
       "\n",
       "                     electrical_removable_battery_bikes     ratio  \n",
       "time_update                                                        \n",
       "2024-03-01 08:00:00                                11.0  1.600000  \n",
       "2024-03-04 00:00:00                                 7.0  2.857143  \n",
       "2024-03-08 08:00:00                                11.0  1.176471  \n",
       "2024-03-09 08:00:00                                 8.0  1.450000  \n",
       "2024-03-09 08:00:00                                 0.0       inf  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the merge based on the datetime index of both DataFrames\n",
    "merged_df_five_day_prediction_resampled = pd.merge(df_five_day_prediction_resampled, df_station_status, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "# Print the merged DataFrame\n",
    "merged_df_five_day_prediction_resampled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "a067734b-c489-44cd-9e4c-1e014df94c5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feels_like</th>\n",
       "      <th>temperature_min</th>\n",
       "      <th>temperature_max</th>\n",
       "      <th>weather_description</th>\n",
       "      <th>wind_speed</th>\n",
       "      <th>wind_gust</th>\n",
       "      <th>station_number</th>\n",
       "      <th>status</th>\n",
       "      <th>empty_stands_number</th>\n",
       "      <th>total_bikes</th>\n",
       "      <th>mechanical_bikes</th>\n",
       "      <th>electrical_internal_battery_bikes</th>\n",
       "      <th>electrical_removable_battery_bikes</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time_update</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2024-03-01 08:00:00</th>\n",
       "      <td>282.380</td>\n",
       "      <td>281.860000</td>\n",
       "      <td>284.435000</td>\n",
       "      <td>\"overcast clouds\"</td>\n",
       "      <td>2.440000</td>\n",
       "      <td>2.010</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-04 00:00:00</th>\n",
       "      <td>279.720</td>\n",
       "      <td>280.315000</td>\n",
       "      <td>283.975000</td>\n",
       "      <td>mist</td>\n",
       "      <td>4.465000</td>\n",
       "      <td>7.755</td>\n",
       "      <td>48</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-08 08:00:00</th>\n",
       "      <td>279.325</td>\n",
       "      <td>277.180000</td>\n",
       "      <td>283.450000</td>\n",
       "      <td>\"clear sky\"</td>\n",
       "      <td>0.430000</td>\n",
       "      <td>0.845</td>\n",
       "      <td>93</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.176471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.450</td>\n",
       "      <td>279.016667</td>\n",
       "      <td>284.183333</td>\n",
       "      <td>\"broken clouds\"</td>\n",
       "      <td>1.713333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>23</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-09 08:00:00</th>\n",
       "      <td>280.450</td>\n",
       "      <td>279.016667</td>\n",
       "      <td>284.183333</td>\n",
       "      <td>\"broken clouds\"</td>\n",
       "      <td>1.713333</td>\n",
       "      <td>0.000</td>\n",
       "      <td>63</td>\n",
       "      <td>OPEN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     feels_like  temperature_min  temperature_max  \\\n",
       "time_update                                                         \n",
       "2024-03-01 08:00:00     282.380       281.860000       284.435000   \n",
       "2024-03-04 00:00:00     279.720       280.315000       283.975000   \n",
       "2024-03-08 08:00:00     279.325       277.180000       283.450000   \n",
       "2024-03-09 08:00:00     280.450       279.016667       284.183333   \n",
       "2024-03-09 08:00:00     280.450       279.016667       284.183333   \n",
       "\n",
       "                    weather_description  wind_speed  wind_gust  \\\n",
       "time_update                                                      \n",
       "2024-03-01 08:00:00   \"overcast clouds\"    2.440000      2.010   \n",
       "2024-03-04 00:00:00                mist    4.465000      7.755   \n",
       "2024-03-08 08:00:00         \"clear sky\"    0.430000      0.845   \n",
       "2024-03-09 08:00:00     \"broken clouds\"    1.713333      0.000   \n",
       "2024-03-09 08:00:00     \"broken clouds\"    1.713333      0.000   \n",
       "\n",
       "                     station_number status  empty_stands_number  total_bikes  \\\n",
       "time_update                                                                    \n",
       "2024-03-01 08:00:00              48   OPEN                 15.0         25.0   \n",
       "2024-03-04 00:00:00              48   OPEN                 26.0         14.0   \n",
       "2024-03-08 08:00:00              93   OPEN                  6.0         34.0   \n",
       "2024-03-09 08:00:00              23   OPEN                  9.0         20.0   \n",
       "2024-03-09 08:00:00              63   OPEN                 35.0          0.0   \n",
       "\n",
       "                     mechanical_bikes  electrical_internal_battery_bikes  \\\n",
       "time_update                                                                \n",
       "2024-03-01 08:00:00              14.0                                0.0   \n",
       "2024-03-04 00:00:00               7.0                                0.0   \n",
       "2024-03-08 08:00:00              23.0                                0.0   \n",
       "2024-03-09 08:00:00              12.0                                0.0   \n",
       "2024-03-09 08:00:00               0.0                                0.0   \n",
       "\n",
       "                     electrical_removable_battery_bikes     ratio  \n",
       "time_update                                                        \n",
       "2024-03-01 08:00:00                                11.0  1.600000  \n",
       "2024-03-04 00:00:00                                 7.0  2.857143  \n",
       "2024-03-08 08:00:00                                11.0  1.176471  \n",
       "2024-03-09 08:00:00                                 8.0  1.450000  \n",
       "2024-03-09 08:00:00                                 0.0       inf  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the merge based on the datetime index of both DataFrames\n",
    "merged_df_current_weather_resampled = pd.merge(df_current_weather_resampled, df_station_status, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "# Print the merged DataFrame\n",
    "merged_df_current_weather_resampled.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d48accb-ae05-4a07-b24d-5472a92a0220",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The features with correlation coefficients greater than 0.1 with the target variabls,>canl be considered as potentially useful descriptive features. These features include:</p>\n",
    "    <ul>\n",
    "        <li><code>feels_like</code></li>\n",
    "        <li><code>temperature_min</code></li>\n",
    "        <li><code>temperature_max</code></li>\n",
    "        <li><code>wind_speed</code></li>\n",
    "        <li><code>wind_gust</code></li>\n",
    "        <li><code>rain_3h</code></li>\n",
    "    </ul>\n",
    "    <p>These features have a relatively stronger correlation with the target variable compared to others in the matrix. Consider using these features as descriptive variables in your predictive modeling.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "a5385f8c-c375-4fba-ae1f-bc837a6451c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define descriptive features including day, hour and week granularity from current weather for current weather\n",
    "descriptive_features = [\n",
    "    'feels_like', \n",
    "    'temperature_min', \n",
    "    'temperature_max', \n",
    "    'wind_speed', \n",
    "    'wind_gust', \n",
    "    'week', \n",
    "    'day', \n",
    "    'hour'  \n",
    "]\n",
    "# define descriptive features for 5 day forecast, including time granularity of hour, week and a day\n",
    "descriptive_features_5_day = [ \n",
    "    'temp_min', \n",
    "    'temp_max', \n",
    "    'wind_speed', \n",
    "    'gust', \n",
    "    'week', \n",
    "    'day', \n",
    "    'hour'  \n",
    "]\n",
    "# Define target variables for current weather df\n",
    "weather_target_variables = [\n",
    "    'bike_stand_ratio',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'last_update',\n",
    "    'name'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "bb12404c-fb1c-41a1-9b6c-9ccf2d2e63cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descriptive features in X:\n",
      "                      feels_like  temperature_min  temperature_max  wind_speed  \\\n",
      "time_update                                                                     \n",
      "2024-03-01 08:00:00     282.380       281.860000       284.435000    2.440000   \n",
      "2024-03-04 00:00:00     279.720       280.315000       283.975000    4.465000   \n",
      "2024-03-08 08:00:00     279.325       277.180000       283.450000    0.430000   \n",
      "2024-03-09 08:00:00     280.450       279.016667       284.183333    1.713333   \n",
      "2024-03-09 08:00:00     280.450       279.016667       284.183333    1.713333   \n",
      "...                         ...              ...              ...         ...   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "\n",
      "                     wind_gust  week  day      hour  \n",
      "time_update                                          \n",
      "2024-03-01 08:00:00      2.010     9    1  08:00:00  \n",
      "2024-03-04 00:00:00      7.755    10    4  00:00:00  \n",
      "2024-03-08 08:00:00      0.845    10    8  08:00:00  \n",
      "2024-03-09 08:00:00      0.000    10    9  08:00:00  \n",
      "2024-03-09 08:00:00      0.000    10    9  08:00:00  \n",
      "...                        ...   ...  ...       ...  \n",
      "2024-04-12 04:00:00      0.000    15   12  04:00:00  \n",
      "2024-04-12 04:00:00      0.000    15   12  04:00:00  \n",
      "2024-04-12 04:00:00      0.000    15   12  04:00:00  \n",
      "2024-04-12 04:00:00      0.000    15   12  04:00:00  \n",
      "2024-04-12 04:00:00      0.000    15   12  04:00:00  \n",
      "\n",
      "[370 rows x 8 columns]\n",
      "\n",
      "Target feature in y:\n",
      " time_update\n",
      "2024-03-01 08:00:00    15.0\n",
      "2024-03-04 00:00:00    26.0\n",
      "2024-03-08 08:00:00     6.0\n",
      "2024-03-09 08:00:00     9.0\n",
      "2024-03-09 08:00:00    35.0\n",
      "                       ... \n",
      "2024-04-12 04:00:00    22.0\n",
      "2024-04-12 04:00:00    32.0\n",
      "2024-04-12 04:00:00    14.0\n",
      "2024-04-12 04:00:00    10.0\n",
      "2024-04-12 04:00:00     6.0\n",
      "Name: empty_stands_number, Length: 370, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Prepare the descriptive features and target variable\n",
    "X = merged_df_current_weather_hdw[['feels_like', 'temperature_min', 'temperature_max', 'wind_speed','wind_gust','week','day', 'hour']]\n",
    "y = merged_df_current_weather_hdw['empty_stands_number']\n",
    "\n",
    "print(\"\\nDescriptive features in X:\\n\", X)\n",
    "print(\"\\nTarget feature in y:\\n\", y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "8a890ec0-72c4-48ec-b8bd-ac7212437d2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descriptive features in X:\n",
      "                      feels_like  temperature_min  temperature_max  wind_speed  \\\n",
      "time_update                                                                     \n",
      "2024-03-01 08:00:00     282.380       281.860000       284.435000    2.440000   \n",
      "2024-03-04 00:00:00     279.720       280.315000       283.975000    4.465000   \n",
      "2024-03-08 08:00:00     279.325       277.180000       283.450000    0.430000   \n",
      "2024-03-09 08:00:00     280.450       279.016667       284.183333    1.713333   \n",
      "2024-03-09 08:00:00     280.450       279.016667       284.183333    1.713333   \n",
      "...                         ...              ...              ...         ...   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "2024-04-12 04:00:00     285.125       282.535000       289.030000    2.060000   \n",
      "\n",
      "                     wind_gust  \n",
      "time_update                     \n",
      "2024-03-01 08:00:00      2.010  \n",
      "2024-03-04 00:00:00      7.755  \n",
      "2024-03-08 08:00:00      0.845  \n",
      "2024-03-09 08:00:00      0.000  \n",
      "2024-03-09 08:00:00      0.000  \n",
      "...                        ...  \n",
      "2024-04-12 04:00:00      0.000  \n",
      "2024-04-12 04:00:00      0.000  \n",
      "2024-04-12 04:00:00      0.000  \n",
      "2024-04-12 04:00:00      0.000  \n",
      "2024-04-12 04:00:00      0.000  \n",
      "\n",
      "[370 rows x 5 columns]\n",
      "\n",
      "Target feature in y:\n",
      " time_update\n",
      "2024-03-01 08:00:00    1.600000\n",
      "2024-03-04 00:00:00    2.857143\n",
      "2024-03-08 08:00:00    1.176471\n",
      "2024-03-09 08:00:00    1.450000\n",
      "2024-03-09 08:00:00         inf\n",
      "                         ...   \n",
      "2024-04-12 04:00:00    2.222222\n",
      "2024-04-12 04:00:00    5.000000\n",
      "2024-04-12 04:00:00    1.583333\n",
      "2024-04-12 04:00:00    1.500000\n",
      "2024-04-12 04:00:00    1.250000\n",
      "Name: ratio, Length: 370, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Prepare the descriptive features\n",
    "X = merged_df_current_weather_resampled[['feels_like', 'temperature_min', 'temperature_max', 'wind_speed','wind_gust']]\n",
    "y = merged_df_current_weather_resampled['ratio']\n",
    "\n",
    "print(\"\\nDescriptive features in X:\\n\", X)\n",
    "print(\"\\nTarget feature in y:\\n\", y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c6d7a18-17b6-4ea7-84b8-80217edd4a6d",
   "metadata": {},
   "source": [
    "</head>\n",
    "<body>\n",
    "  <h1>Pandas Profiling Bug</h1>\n",
    "  <p>An error occurred when using the <code>pandas_profiling</code> library with a real dataset. The error message indicates an issue related to numpy.</p>\n",
    "  <h2>Code Snippet:</h2>\n",
    "  <pre><code>\n",
    "df = pd.DataFrame(np.random.rand(100, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n",
    "profile = ProfileReport(df, title=\"Pandas Profiling Report\")\n",
    "profile\n",
    "  </code></pre>\n",
    "  <h3>Explanation of the Bug:</h3>\n",
    "  <p>The error occurs when trying to generate a profile report with <code>pandas_profiling</code> using a real dataset. This suggests that the issue may be specific to the dataset's format or content.</p>  \n",
    "  <h2>Documentation Link:</h2>\n",
    "  <p>For more information about the <code>pandas_profiling</code> library and the bug, please refer to the <a href=\"https://github.com/pandas-profiling/pandas-profiling\">official documentation</a>.</p>\n",
    "</body>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beeb782d-bf47-47eb-ba92-96d3653b7b76",
   "metadata": {},
   "source": [
    "<h3><center><strong>Training a linear regression model</strong></center></h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11fefc82-fa65-4458-a570-a4874addfb65",
   "metadata": {},
   "source": [
    "<div>\n",
    "    <p>The codes below will split the downsampled data into training and testing sets using a test size of 20%, then train a linear regression model on the training data and evaluate its performance on both the training and testing sets for current and five day weather prediction.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ada24bca-d782-4f65-9f1d-c3a95d01563e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients for electrical_internal_battery_bikes:\n",
      "feels_like: 0.0\n",
      "temperature_min: 0.0\n",
      "temperature_max: 0.0\n",
      "wind_speed: 0.0\n",
      "wind_gust: 0.0\n",
      "week: 0.0\n",
      "day: 0.0\n",
      "\n",
      "Intercept for electrical_internal_battery_bikes: 0.0\n",
      "\n",
      "Training Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Coefficients for mechanical_bikes:\n",
      "feels_like: -1.5205698287114011\n",
      "temperature_min: 2.3858303108417616\n",
      "temperature_max: -0.40446153260953555\n",
      "wind_speed: -1.6760313493258894\n",
      "wind_gust: -0.29898811651873136\n",
      "week: -0.8130694127259619\n",
      "day: 0.060713314802970764\n",
      "\n",
      "Intercept for mechanical_bikes: -104.19513166757015\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.0633213385666237\n",
      "Mean Squared Error: 42.935794980896254\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.12749537435302594\n",
      "Mean Squared Error: 33.10626070517785\n",
      "\n",
      "Coefficients for electrical_removable_battery_bikes:\n",
      "feels_like: -0.9178276742160397\n",
      "temperature_min: 1.0941448032147614\n",
      "temperature_max: 0.07240679781918036\n",
      "wind_speed: -0.8899614797117532\n",
      "wind_gust: -0.017837513953948544\n",
      "week: -0.4315743421533986\n",
      "day: 0.04404753596435859\n",
      "\n",
      "Intercept for electrical_removable_battery_bikes: -57.84221760258774\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.04947417719590885\n",
      "Mean Squared Error: 14.556098328835917\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.044693658461403496\n",
      "Mean Squared Error: 17.82232490100887\n",
      "\n",
      "Coefficients for empty_stands_number:\n",
      "feels_like: 3.036293911939743\n",
      "temperature_min: -4.400867036948525\n",
      "temperature_max: 0.8151528618590205\n",
      "wind_speed: 3.349939725890178\n",
      "wind_gust: -0.4278207898412161\n",
      "week: 0.35274877441563296\n",
      "day: -0.07858000578165514\n",
      "\n",
      "Intercept for empty_stands_number: 156.3908221560908\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.07806671585862712\n",
      "Mean Squared Error: 111.29775880684544\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.021225360757933576\n",
      "Mean Squared Error: 104.48444608200212\n",
      "\n",
      "Coefficients for total_bikes:\n",
      "feels_like: -2.4166540268978816\n",
      "temperature_min: 3.465496847058205\n",
      "temperature_max: -0.34451604920414836\n",
      "wind_speed: -2.551218820496851\n",
      "wind_gust: -0.3172848298220743\n",
      "week: -1.2427565247276746\n",
      "day: 0.10528782657996083\n",
      "\n",
      "Intercept for total_bikes: -160.6131460473406\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.06900581841026132\n",
      "Mean Squared Error: 86.60762089275353\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.11663991546303254\n",
      "Mean Squared Error: 81.657735236066\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_current_weather_hdw = [\n",
    "    'feels_like', \n",
    "    'temperature_min', \n",
    "    'temperature_max', \n",
    "    'wind_speed', \n",
    "    'wind_gust', \n",
    "    'week', \n",
    "    'day'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_current_weather_hdw = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Extract descriptive features (X) and target variables (y)\n",
    "X = merged_df_current_weather_hdw[descriptive_features_current_weather_hdw]\n",
    "y = merged_df_current_weather_hdw[target_variables_current_weather_hdw]\n",
    "\n",
    "# Split the dataset into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train separate linear regression models for each target variable\n",
    "models = {}\n",
    "for target in target_variables_current_weather_hdw:\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X_train, y_train[target])\n",
    "    models[target] = linreg\n",
    "\n",
    "    # Print the coefficients and intercept\n",
    "    print(f\"\\nCoefficients for {target}:\")\n",
    "    for feature, coefficient in zip(X.columns, linreg.coef_):\n",
    "        print(f\"{feature}: {coefficient}\")\n",
    "    print(f\"\\nIntercept for {target}: {linreg.intercept_}\")\n",
    "\n",
    "    # Make predictions on the training set\n",
    "    y_train_pred = linreg.predict(X_train)\n",
    "\n",
    "    # Make predictions on the testing set\n",
    "    y_test_pred = linreg.predict(X_test)\n",
    "\n",
    "    # Calculate R-squared for training set\n",
    "    r_squared_train = r2_score(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for training set\n",
    "    mse_train = mean_squared_error(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate R-squared for testing set\n",
    "    r_squared_test = r2_score(y_test[target], y_test_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for testing set\n",
    "    mse_test = mean_squared_error(y_test[target], y_test_pred)\n",
    "\n",
    "    print(\"\\nTraining Set:\")\n",
    "    print(\"R-squared:\", r_squared_train)\n",
    "    print(\"Mean Squared Error:\", mse_train)\n",
    "\n",
    "    print(\"\\nTesting Set:\")\n",
    "    print(\"R-squared:\", r_squared_test)\n",
    "    print(\"Mean Squared Error:\", mse_test)\n",
    "\n",
    "    # Save the trained model to a file\n",
    "     #model_path = f\"{target}_model_current_weather_hdw.pickle\"\n",
    "     #with open(model_path, 'wb') as f:\n",
    "       #  pickle.dump(linreg, f)\n",
    "\n",
    "   # print(f\"Linear regression model for current weather hdf {target} saved as {model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7e97a278-c6cc-40b0-be57-1be23b187dd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients for electrical_internal_battery_bikes:\n",
      "temp_min: 0.0\n",
      "temp_max: 0.0\n",
      "wind_speed: 0.0\n",
      "gust: 0.0\n",
      "rain_3h: 0.0\n",
      "week: 0.0\n",
      "day: 0.0\n",
      "\n",
      "Intercept for electrical_internal_battery_bikes: 0.0\n",
      "\n",
      "Training Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Coefficients for mechanical_bikes:\n",
      "temp_min: 1.4187455694754112\n",
      "temp_max: -1.3562803645888903\n",
      "wind_speed: -3.0504784951542363\n",
      "gust: 0.5982451662597186\n",
      "rain_3h: 1.1013407029150006\n",
      "week: -1.0274054698305777\n",
      "day: 0.011432355480734374\n",
      "\n",
      "Intercept for mechanical_bikes: 6.823519653057116\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.04014667037019459\n",
      "Mean Squared Error: 43.99808330174849\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.08631956965812981\n",
      "Mean Squared Error: 34.66863285187439\n",
      "\n",
      "Coefficients for electrical_removable_battery_bikes:\n",
      "temp_min: -2.0530248985356034\n",
      "temp_max: 2.1106072073379147\n",
      "wind_speed: -1.1487835245035758\n",
      "gust: 0.130007492388024\n",
      "rain_3h: 0.5002672441730213\n",
      "week: -0.6319711517753781\n",
      "day: 0.016705315519667696\n",
      "\n",
      "Intercept for electrical_removable_battery_bikes: -2.872354072642962\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.036944653995648835\n",
      "Mean Squared Error: 14.747972097376348\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.023532680843511677\n",
      "Mean Squared Error: 18.21710697449708\n",
      "\n",
      "Coefficients for empty_stands_number:\n",
      "temp_min: -9.30122942729881\n",
      "temp_max: 9.390602947330496\n",
      "wind_speed: 2.0603486805754825\n",
      "gust: 0.6041601142474875\n",
      "rain_3h: -2.6766652940639326\n",
      "week: 1.341189978367046\n",
      "day: 0.07686182382859275\n",
      "\n",
      "Intercept for empty_stands_number: -29.61917119101115\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.039277257714018576\n",
      "Mean Squared Error: 115.98050519542778\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.0063570955623166725\n",
      "Mean Squared Error: 102.96323194762992\n",
      "\n",
      "Coefficients for total_bikes:\n",
      "temp_min: -0.4281151352714747\n",
      "temp_max: 0.5467626489456466\n",
      "wind_speed: -4.160540670419497\n",
      "gust: 0.7129453583267158\n",
      "rain_3h: 1.5850754798286075\n",
      "week: -1.6538016860391642\n",
      "day: 0.02883722010829852\n",
      "\n",
      "Intercept for total_bikes: 4.270992184375558\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.046264772136967225\n",
      "Mean Squared Error: 88.72315281904213\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.07202477431980547\n",
      "Mean Squared Error: 85.78195529849162\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_five_day_prediction_hdw = [\n",
    "    'temp_min', \n",
    "    'temp_max', \n",
    "    'wind_speed', \n",
    "    'gust',\n",
    "    'rain_3h',\n",
    "    'week', \n",
    "    'day'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_five_day_prediction_hdw = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Extract descriptive features (X) and target variables (y)\n",
    "X = merged_df_five_day_prediction_hdw[descriptive_features_five_day_prediction_hdw]\n",
    "y = merged_df_five_day_prediction_hdw[target_variables_five_day_prediction_hdw]\n",
    "\n",
    "# Split the dataset into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train separate linear regression models for each target variable\n",
    "models = {}\n",
    "for target in target_variables_five_day_prediction_hdw:\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X_train, y_train[target])\n",
    "    models[target] = linreg\n",
    "\n",
    "    # Print the coefficients and intercept\n",
    "    print(f\"\\nCoefficients for {target}:\")\n",
    "    for feature, coefficient in zip(X.columns, linreg.coef_):\n",
    "        print(f\"{feature}: {coefficient}\")\n",
    "    print(f\"\\nIntercept for {target}: {linreg.intercept_}\")\n",
    "\n",
    "    # Make predictions on the training set\n",
    "    y_train_pred = linreg.predict(X_train)\n",
    "\n",
    "    # Make predictions on the testing set\n",
    "    y_test_pred = linreg.predict(X_test)\n",
    "\n",
    "    # Calculate R-squared for training set\n",
    "    r_squared_train = r2_score(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for training set\n",
    "    mse_train = mean_squared_error(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate R-squared for testing set\n",
    "    r_squared_test = r2_score(y_test[target], y_test_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for testing set\n",
    "    mse_test = mean_squared_error(y_test[target], y_test_pred)\n",
    "\n",
    "    print(\"\\nTraining Set:\")\n",
    "    print(\"R-squared:\", r_squared_train)\n",
    "    print(\"Mean Squared Error:\", mse_train)\n",
    "\n",
    "    print(\"\\nTesting Set:\")\n",
    "    print(\"R-squared:\", r_squared_test)\n",
    "    print(\"Mean Squared Error:\", mse_test)\n",
    "\n",
    "    # Save the trained model to a file\n",
    "  #  model_path = f\"{target}_model_five_day_prediction_hdw.pickle\"\n",
    "   # with open(model_path, 'wb') as f:\n",
    "   #     pickle.dump(linreg, f)\n",
    "\n",
    " #     print(f\"Linear regression model for current weather hdf {target} saved as {model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e4ae88c2-3303-460e-9253-7a43e30e6ecf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert temperature columns from Kelvin to Celsius\n",
    "merged_df_current_weather_resampled['feels_like'] -= 273.15\n",
    "merged_df_current_weather_resampled['temperature_min'] -= 273.15\n",
    "merged_df_current_weather_resampled['temperature_max'] -= 273.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "7f9d47fc-a788-45c8-bfe4-b8911e4d6e9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert wind_speed and wind_gust from m/s to km/h\n",
    "merged_df_current_weather_resampled['wind_speed'] *= 3.6\n",
    "merged_df_current_weather_resampled['wind_gust'] *= 3.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "e122d45d-5092-4ef0-b9e5-2224400bc894",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of columns to round to integers\n",
    "columns_to_round = ['feels_like', 'temperature_min', 'temperature_max', 'wind_speed', 'wind_gust']\n",
    "\n",
    "# Round each column to the nearest integer\n",
    "merged_df_current_weather_resampled[columns_to_round] = merged_df_current_weather_resampled[columns_to_round].round().astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "5531b171-ee0e-41e5-89c1-ae98114ba437",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Columns to convert to integers\n",
    "columns_to_convert = ['empty_stands_number', 'total_bikes', 'mechanical_bikes', \n",
    "                      'electrical_internal_battery_bikes', 'electrical_removable_battery_bikes']\n",
    "\n",
    "# Convert columns to integers\n",
    "merged_df_current_weather_resampled[columns_to_convert] = merged_df_current_weather_resampled[columns_to_convert].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "0aea9a5f-f50d-4152-8f8a-a5d91553a949",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert temperature columns from Kelvin to Celsius\n",
    "merged_df_five_day_prediction_resampled['temp_min'] -= 273.15\n",
    "merged_df_five_day_prediction_resampled['temp_max'] -= 273.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "8c33f29f-e4ee-426b-8c24-cbad68c1cfe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of columns to round to integers\n",
    "columns_to_round = ['temp_min', 'temp_max', 'wind_speed', 'gust', 'rain_3h']\n",
    "\n",
    "# Round each column to the nearest integer\n",
    "merged_df_five_day_prediction_resampled[columns_to_round] = merged_df_five_day_prediction_resampled[columns_to_round].round().astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "d88bf47b-3a58-41bc-89d9-7d0cee70482a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients for electrical_internal_battery_bikes:\n",
      "temp_min: 0.0\n",
      "temp_max: 0.0\n",
      "wind_speed: 0.0\n",
      "gust: 0.0\n",
      "rain_3h: 0.0\n",
      "\n",
      "Intercept for electrical_internal_battery_bikes: 0.0\n",
      "\n",
      "Training Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Coefficients for mechanical_bikes:\n",
      "temp_min: 3.386497739559205\n",
      "temp_max: -3.458280748852395\n",
      "wind_speed: 0.8086947964083593\n",
      "gust: -1.1719018415886637\n",
      "rain_3h: 0.44414912437693754\n",
      "\n",
      "Intercept for mechanical_bikes: 9.477655918616708\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.05567837631032113\n",
      "Mean Squared Error: 43.28613568363114\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.03530061525760941\n",
      "Mean Squared Error: 39.28338150818871\n",
      "\n",
      "Coefficients for electrical_removable_battery_bikes:\n",
      "temp_min: 2.0505570968625677\n",
      "temp_max: -2.1086551081539975\n",
      "wind_speed: 1.4093735363843103\n",
      "gust: -1.0704219301976194\n",
      "rain_3h: -0.08530334973531266\n",
      "\n",
      "Intercept for electrical_removable_battery_bikes: 4.784896769793832\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.056672387243633104\n",
      "Mean Squared Error: 14.445866864595217\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.13938410619054498\n",
      "Mean Squared Error: 21.256504688190702\n",
      "\n",
      "Coefficients for empty_stands_number:\n",
      "temp_min: -6.078201159053101\n",
      "temp_max: 6.662641289580641\n",
      "wind_speed: -4.55181118609922\n",
      "gust: 3.5231996959897716\n",
      "rain_3h: -0.5833834041094148\n",
      "\n",
      "Intercept for empty_stands_number: 13.952568264927184\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.07133755143408693\n",
      "Mean Squared Error: 112.11011793518692\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.0939141543240316\n",
      "Mean Squared Error: 111.92144150335166\n",
      "\n",
      "Coefficients for total_bikes:\n",
      "temp_min: 5.4272377425840626\n",
      "temp_max: -5.559781863838557\n",
      "wind_speed: 2.224989302749755\n",
      "gust: -2.2421392867367085\n",
      "rain_3h: 0.35635633903690034\n",
      "\n",
      "Intercept for total_bikes: 14.262662276770541\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.06744778675966068\n",
      "Mean Squared Error: 86.75255994522291\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.08996266626378313\n",
      "Mean Squared Error: 100.75606129024713\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_five_day_prediction_resampled = [\n",
    "    'temp_min', \n",
    "    'temp_max', \n",
    "    'wind_speed', \n",
    "    'gust',\n",
    "    'rain_3h',\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_five_day_prediction_resampled = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Extract descriptive features (X) and target variables (y)\n",
    "X = merged_df_five_day_prediction_resampled[descriptive_features_five_day_prediction_resampled]\n",
    "y = merged_df_five_day_prediction_resampled[target_variables_five_day_prediction_resampled]\n",
    "\n",
    "# Split the dataset into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train separate linear regression models for each target variable\n",
    "models = {}\n",
    "for target in target_variables_five_day_prediction_resampled:\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X_train, y_train[target])\n",
    "    models[target] = linreg\n",
    "\n",
    "    # Print the coefficients and intercept\n",
    "    print(f\"\\nCoefficients for {target}:\")\n",
    "    for feature, coefficient in zip(X.columns, linreg.coef_):\n",
    "        print(f\"{feature}: {coefficient}\")\n",
    "    print(f\"\\nIntercept for {target}: {linreg.intercept_}\")\n",
    "\n",
    "    # Make predictions on the training set\n",
    "    y_train_pred = linreg.predict(X_train)\n",
    "\n",
    "    # Make predictions on the testing set\n",
    "    y_test_pred = linreg.predict(X_test)\n",
    "\n",
    "    # Calculate R-squared for training set\n",
    "    r_squared_train = r2_score(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for training set\n",
    "    mse_train = mean_squared_error(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate R-squared for testing set\n",
    "    r_squared_test = r2_score(y_test[target], y_test_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for testing set\n",
    "    mse_test = mean_squared_error(y_test[target], y_test_pred)\n",
    "\n",
    "    print(\"\\nTraining Set:\")\n",
    "    print(\"R-squared:\", r_squared_train)\n",
    "    print(\"Mean Squared Error:\", mse_train)\n",
    "\n",
    "    print(\"\\nTesting Set:\")\n",
    "    print(\"R-squared:\", r_squared_test)\n",
    "    print(\"Mean Squared Error:\", mse_test)\n",
    "\n",
    "    # Save the trained model to a file\n",
    "    #model_path = f\"{target}_model_five_day_prediction_resampled.pickle\"\n",
    "   # with open(model_path, 'wb') as f:\n",
    "    #    pickle.dump(linreg, f)\n",
    "\n",
    "   # print(f\"Linear regression model for current weather hdf {target} saved as {model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "9f3c2838-429d-484b-8f42-f6f03bc455e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients for electrical_internal_battery_bikes:\n",
      "temperature_min: 0.0\n",
      "temperature_max: 0.0\n",
      "wind_speed: 0.0\n",
      "wind_gust: 0.0\n",
      "\n",
      "Intercept for electrical_internal_battery_bikes: 0.0\n",
      "\n",
      "Training Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Coefficients for mechanical_bikes:\n",
      "temperature_min: 0.8416732274572591\n",
      "temperature_max: -0.7617599765563899\n",
      "wind_speed: -0.1959741285762487\n",
      "wind_gust: -0.016176339706314685\n",
      "\n",
      "Intercept for mechanical_bikes: 11.467085012614138\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.021257091778470683\n",
      "Mean Squared Error: 44.86395022824457\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.020067179205566887\n",
      "Mean Squared Error: 37.18250939325934\n",
      "\n",
      "Coefficients for electrical_removable_battery_bikes:\n",
      "temperature_min: 0.15362044716120193\n",
      "temperature_max: -0.1242851285043178\n",
      "wind_speed: -0.0823803959869774\n",
      "wind_gust: 0.0278639349424967\n",
      "\n",
      "Intercept for electrical_removable_battery_bikes: 4.642530145234813\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.007727043145403845\n",
      "Mean Squared Error: 15.195402778654625\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.020381238393291756\n",
      "Mean Squared Error: 19.036371018169667\n",
      "\n",
      "Coefficients for empty_stands_number:\n",
      "temperature_min: -1.3848325685286702\n",
      "temperature_max: 1.5274292101934455\n",
      "wind_speed: 0.4298493930718231\n",
      "wind_gust: -0.11252636250012643\n",
      "\n",
      "Intercept for empty_stands_number: 9.161873447545767\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.03770744579849261\n",
      "Mean Squared Error: 116.17001624894078\n",
      "\n",
      "Testing Set:\n",
      "R-squared: -0.030175666382771693\n",
      "Mean Squared Error: 105.40017708654923\n",
      "\n",
      "Coefficients for total_bikes:\n",
      "temperature_min: 0.9909343002460111\n",
      "temperature_max: -0.8846762663686959\n",
      "wind_speed: -0.27720162646254465\n",
      "wind_gust: 0.01199125734550513\n",
      "\n",
      "Intercept for total_bikes: 16.108715321067933\n",
      "\n",
      "Training Set:\n",
      "R-squared: 0.01726533320369228\n",
      "Mean Squared Error: 91.42088440845652\n",
      "\n",
      "Testing Set:\n",
      "R-squared: 0.011369412885641528\n",
      "Mean Squared Error: 91.38893203576978\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_current_weather_resampled = [\n",
    "    'temperature_min', \n",
    "    'temperature_max', \n",
    "    'wind_speed', \n",
    "    'wind_gust'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_current_weather_resampled = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Extract descriptive features (X) and target variables (y)\n",
    "X = merged_df_current_weather_resampled[descriptive_features_current_weather_resampled]\n",
    "y = merged_df_current_weather_resampled[target_variables_current_weather_resampled]\n",
    "\n",
    "# Split the dataset into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train separate linear regression models for each target variable\n",
    "models = {}\n",
    "for target in target_variables_current_weather_resampled:\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X_train, y_train[target])\n",
    "    models[target] = linreg\n",
    "\n",
    "    # Print the coefficients and intercept\n",
    "    print(f\"\\nCoefficients for {target}:\")\n",
    "    for feature, coefficient in zip(X.columns, linreg.coef_):\n",
    "        print(f\"{feature}: {coefficient}\")\n",
    "    print(f\"\\nIntercept for {target}: {linreg.intercept_}\")\n",
    "\n",
    "    # Make predictions on the training set\n",
    "    y_train_pred = linreg.predict(X_train)\n",
    "\n",
    "    # Make predictions on the testing set\n",
    "    y_test_pred = linreg.predict(X_test)\n",
    "\n",
    "    # Calculate R-squared for training set\n",
    "    r_squared_train = r2_score(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for training set\n",
    "    mse_train = mean_squared_error(y_train[target], y_train_pred)\n",
    "\n",
    "    # Calculate R-squared for testing set\n",
    "    r_squared_test = r2_score(y_test[target], y_test_pred)\n",
    "\n",
    "    # Calculate Mean Squared Error for testing set\n",
    "    mse_test = mean_squared_error(y_test[target], y_test_pred)\n",
    "\n",
    "    print(\"\\nTraining Set:\")\n",
    "    print(\"R-squared:\", r_squared_train)\n",
    "    print(\"Mean Squared Error:\", mse_train)\n",
    "\n",
    "    print(\"\\nTesting Set:\")\n",
    "    print(\"R-squared:\", r_squared_test)\n",
    "    print(\"Mean Squared Error:\", mse_test)\n",
    "\n",
    "    # Save the trained model to a file\n",
    "    #model_path = f\"{target}_model_current_weather_resampled.pickle\"\n",
    "    #with open(model_path, 'wb') as f:\n",
    "    #    pickle.dump(linreg, f)\n",
    "\n",
    "    #print(f\"Linear regression model for current weather hdf {target} saved as {model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "12d6e4b7-508b-4ccb-b402-ccb1538d5b8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate correlation between actual and predicted values\n",
    "corr_train = np.corrcoef(y_train[target], y_train_pred)[0, 1]\n",
    "corr_test = np.corrcoef(y_test[target], y_test_pred)[0, 1]\n",
    "\n",
    "# Plotting predictions vs. actuals for training set\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.scatter(y_train[target], y_train_pred)\n",
    "plt.plot([min(y_train[target]), max(y_train[target])], [min(y_train[target]), max(y_train[target])], 'k--', lw=4)\n",
    "plt.title(f'Predictions vs. Actuals for {target} (Training Set)\\nCorrelation: {corr_train:.2f}')\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "\n",
    "# Plotting predictions vs. actuals for testing set\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.scatter(y_test[target], y_test_pred)\n",
    "plt.plot([min(y_test[target]), max(y_test[target])], [min(y_test[target]), max(y_test[target])], 'k--', lw=4)\n",
    "plt.title(f'Predictions vs. Actuals for {target} (Testing Set)\\nCorrelation: {corr_test:.2f}')\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "046030c7-afe0-4ade-ba51-ebc9fd3d7724",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count the number of samples for stations 65, 75, and 80, as these do not seem to have enough data points to do linear regression for\n",
    "#count_65 = merged_df_current_weather_resampled[merged_df_current_weather_resampled['station_number'] == 65].shape[0]\n",
    "#count_75 = merged_df_current_weather_resampled[merged_df_current_weather_resampled['station_number'] == 75].shape[0]\n",
    "#count_80 = merged_df_current_weather_resampled[merged_df_current_weather_resampled['station_number'] == 80].shape[0]\n",
    "\n",
    "# Print the counts\n",
    "#print(f\"Number of samples for station 65: {count_65}\")\n",
    "#print(f\"Number of samples for station 75: {count_75}\")\n",
    "#print(f\"Number of samples for station 80: {count_80}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "18a39042-09fb-4933-b53c-ef4657eb72d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training model for station number: 1\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.8433303302367694e-28\n",
      "\n",
      "Training model for station number: 2\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9801024428684002\n",
      "Mean Squared Error: 0.060000000000000074\n",
      "\n",
      "Training model for station number: 3\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.6165921796030613\n",
      "Mean Squared Error: 15.333333333333343\n",
      "\n",
      "Training model for station number: 4\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.843429478166145\n",
      "Mean Squared Error: 2.3585714285714294\n",
      "\n",
      "Training model for station number: 5\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 6\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8285991246364892\n",
      "Mean Squared Error: 5.04\n",
      "\n",
      "Training model for station number: 7\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5433966179064218\n",
      "Mean Squared Error: 1.0797619047619051\n",
      "\n",
      "Training model for station number: 8\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.5282992012333426e-29\n",
      "\n",
      "Training model for station number: 9\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7740497358681294\n",
      "Mean Squared Error: 6.428571428571425\n",
      "\n",
      "Training model for station number: 11\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.3300003830977284\n",
      "Mean Squared Error: 1.4\n",
      "\n",
      "Training model for station number: 12\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.6155871338926322e-29\n",
      "\n",
      "Training model for station number: 13\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8503393744126729\n",
      "Mean Squared Error: 0.22499999999999973\n",
      "\n",
      "Training model for station number: 14\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7821857204014044\n",
      "Mean Squared Error: 12.199113475177313\n",
      "\n",
      "Training model for station number: 15\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 16\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9992188221023903\n",
      "Mean Squared Error: 0.006122448979591843\n",
      "\n",
      "Training model for station number: 17\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.260625074913516e-30\n",
      "\n",
      "Training model for station number: 18\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.0502621668545787e-28\n",
      "\n",
      "Training model for station number: 19\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.399752896237826e-29\n",
      "\n",
      "Training model for station number: 20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 21\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0107280348144214e-29\n",
      "\n",
      "Training model for station number: 22\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7084288260758849\n",
      "Mean Squared Error: 1.8749999999999996\n",
      "\n",
      "Training model for station number: 23\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9222238499833368\n",
      "Mean Squared Error: 2.6769230769230767\n",
      "\n",
      "Training model for station number: 24\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.5146129380243426e-29\n",
      "\n",
      "Training model for station number: 26\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.2278462217584005e-27\n",
      "\n",
      "Training model for station number: 27\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5486573576799139\n",
      "Mean Squared Error: 1.7238095238095243\n",
      "\n",
      "Training model for station number: 28\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.338734978715565e-29\n",
      "\n",
      "Training model for station number: 29\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.35009268176441e-29\n",
      "\n",
      "Training model for station number: 31\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.0510383535746308e-30\n",
      "\n",
      "Training model for station number: 32\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.8551632438150846e-28\n",
      "\n",
      "Training model for station number: 33\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.9187853493177438e-30\n",
      "\n",
      "Training model for station number: 34\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 35\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 36\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7052919540693887\n",
      "Mean Squared Error: 11.602597402597397\n",
      "\n",
      "Training model for station number: 37\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8736507936507938\n",
      "Mean Squared Error: 0.19999999999999957\n",
      "\n",
      "Training model for station number: 38\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.6894831625806395\n",
      "Mean Squared Error: 12.285897435897429\n",
      "\n",
      "Training model for station number: 39\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 9.190229545824788e-30\n",
      "\n",
      "Training model for station number: 40\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 41\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.312621788766412e-30\n",
      "\n",
      "Training model for station number: 42\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.769412642927808e-29\n",
      "\n",
      "Training model for station number: 43\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.949408582650485\n",
      "Mean Squared Error: 0.9400000000000007\n",
      "\n",
      "Training model for station number: 44\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model performance:\n",
      "R-squared: 0.4801627224519603\n",
      "Mean Squared Error: 17.43333333333332\n",
      "\n",
      "Training model for station number: 45\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 47\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 9.849869118313808e-27\n",
      "\n",
      "Training model for station number: 48\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.829085967358352\n",
      "Mean Squared Error: 5.569034852546915\n",
      "\n",
      "Training model for station number: 49\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.268488335595387e-28\n",
      "\n",
      "Training model for station number: 51\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.5946581805805343e-27\n",
      "\n",
      "Training model for station number: 52\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.48291729381853077\n",
      "Mean Squared Error: 15.116666666666665\n",
      "\n",
      "Training model for station number: 53\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5511688311688314\n",
      "Mean Squared Error: 0.9846153846153841\n",
      "\n",
      "Training model for station number: 54\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.7865323450608567e-29\n",
      "\n",
      "Training model for station number: 56\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.598583866909029e-30\n",
      "\n",
      "Training model for station number: 57\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.9953428796796894e-30\n",
      "\n",
      "Training model for station number: 58\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.674394346893936e-27\n",
      "\n",
      "Training model for station number: 59\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0746257681373232e-29\n",
      "\n",
      "Training model for station number: 60\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 61\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3228827602007046e-30\n",
      "\n",
      "Training model for station number: 62\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9572834059420554\n",
      "Mean Squared Error: 0.24615384615384633\n",
      "\n",
      "Training model for station number: 63\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5370879120879122\n",
      "Mean Squared Error: 8.666666666666668\n",
      "\n",
      "Training model for station number: 64\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.484384797619455\n",
      "Mean Squared Error: 59.18571428571429\n",
      "\n",
      "Training model for station number: 65\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 66\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.3560645702600883e-29\n",
      "\n",
      "Training model for station number: 67\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.573064690121714e-30\n",
      "\n",
      "Training model for station number: 68\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5359437674324233\n",
      "Mean Squared Error: 31.0897435897436\n",
      "\n",
      "Training model for station number: 69\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5849006609080367\n",
      "Mean Squared Error: 40.03461538461538\n",
      "\n",
      "Training model for station number: 71\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.6671260463670716e-29\n",
      "\n",
      "Training model for station number: 72\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7934366062606744\n",
      "Mean Squared Error: 0.6402491241728301\n",
      "\n",
      "Training model for station number: 73\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.42559808612440164\n",
      "Mean Squared Error: 2.300000000000001\n",
      "\n",
      "Training model for station number: 74\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7190703878330116\n",
      "Mean Squared Error: 5.536250000000002\n",
      "\n",
      "Training model for station number: 75\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 76\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8984239159054788\n",
      "Mean Squared Error: 2.696703296703295\n",
      "\n",
      "Training model for station number: 77\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.1023143124139963e-29\n",
      "\n",
      "Training model for station number: 78\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.685201741295465e-28\n",
      "\n",
      "Training model for station number: 79\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8166666666666671\n",
      "Mean Squared Error: 0.05999999999999985\n",
      "\n",
      "Training model for station number: 80\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 82\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.962710341423637\n",
      "Mean Squared Error: 0.3142857142857114\n",
      "\n",
      "Training model for station number: 83\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.4326739577216677\n",
      "Mean Squared Error: 31.086813186813195\n",
      "\n",
      "Training model for station number: 84\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9458232885682432\n",
      "Mean Squared Error: 0.4571428571428572\n",
      "\n",
      "Training model for station number: 86\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.41266231676955234\n",
      "Mean Squared Error: 23.318000000000005\n",
      "\n",
      "Training model for station number: 87\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.550175049685135e-29\n",
      "\n",
      "Training model for station number: 88\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9491569872756115\n",
      "Mean Squared Error: 0.2848484848484849\n",
      "\n",
      "Training model for station number: 89\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.7117093616972283e-32\n",
      "\n",
      "Training model for station number: 91\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.6369738655080728\n",
      "Mean Squared Error: 10.8\n",
      "\n",
      "Training model for station number: 92\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.7118281643295956e-29\n",
      "\n",
      "Training model for station number: 93\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9524769503745576\n",
      "Mean Squared Error: 0.32857142857142885\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_five_day_prediction_resampled = [\n",
    "    'temp_min', \n",
    "    'temp_max', \n",
    "    'wind_speed', \n",
    "    'gust',\n",
    "    'rain_3h'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_five_day_prediction_resampled = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Group the merged station weather data by station_number\n",
    "grouped_data = merged_df_five_day_prediction_resampled.groupby('station_number')\n",
    "\n",
    "# Iterate over each group (station)\n",
    "for station_number, group_data in grouped_data:\n",
    "    print(f\"\\nTraining model for station number: {station_number}\")\n",
    "    \n",
    "    # Filter the data for the current station number from merged_df_five_day_prediction_resampled\n",
    "    station_data = merged_df_five_day_prediction_resampled[merged_df_five_day_prediction_resampled['station_number'] == station_number].copy()\n",
    "\n",
    "    # Extract descriptive features (X) and target variables (y)\n",
    "    X = station_data[descriptive_features_five_day_prediction_resampled]\n",
    "    y = station_data[target_variables_five_day_prediction_resampled]\n",
    "    \n",
    "    # Train a linear regression model\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X, y)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = linreg.predict(X)\n",
    "    \n",
    "    # Calculate feels_like based on temperature_min and temperature_max\n",
    "    feels_like_values = (y_pred[:, 0] + y_pred[:, 1]) / 2\n",
    "\n",
    "    # Ensure that feels_like_values are in the correct data type (float64)\n",
    "    feels_like_values = feels_like_values.astype(float)\n",
    "\n",
    "    # Round feels_like_values to the nearest integer\n",
    "    station_data.loc[:, 'feels_like'] = np.round(feels_like_values).astype(int)\n",
    "    \n",
    "    # Calculate R-squared\n",
    "    r_squared = r2_score(y, y_pred)\n",
    "    \n",
    "    # Calculate Mean Squared Error\n",
    "    mse = mean_squared_error(y, y_pred)\n",
    "    \n",
    "    print(\"\\nModel performance:\")\n",
    "    print(\"R-squared:\", r_squared)\n",
    "    print(\"Mean Squared Error:\", mse)\n",
    "    \n",
    "    # Save the trained model to a pickle file\n",
    "    # model_filename = f\"{station_number}_model_five_day_prediction_for_each_station.pickle\"\n",
    "    # with open(model_filename, 'wb') as f:\n",
    "    #     pickle.dump(linreg, f)\n",
    "    \n",
    "    # print(f\"Linear regression model for station number {station_number} saved as {model_filename}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "c2636aec-2734-448e-b7fd-f0639351e897",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training model for station number: 1\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0791617183423442e-28\n",
      "\n",
      "Training model for station number: 2\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.3228793480172066e-29\n",
      "\n",
      "Training model for station number: 3\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.2813059048154755e-28\n",
      "\n",
      "Training model for station number: 4\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5758088081495185\n",
      "Mean Squared Error: 6.716202531645567\n",
      "\n",
      "Training model for station number: 5\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 6\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1056674447577701e-28\n",
      "\n",
      "Training model for station number: 7\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.4373425918681914e-30\n",
      "\n",
      "Training model for station number: 8\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.3702894149244053e-29\n",
      "\n",
      "Training model for station number: 9\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.578824321722995e-29\n",
      "\n",
      "Training model for station number: 11\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.8952838681830344e-29\n",
      "\n",
      "Training model for station number: 12\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.961459883310695e-30\n",
      "\n",
      "Training model for station number: 13\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9644572210257639\n",
      "Mean Squared Error: 0.09087145602650173\n",
      "\n",
      "Training model for station number: 14\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.778945659192397e-27\n",
      "\n",
      "Training model for station number: 15\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 16\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.581476095487245\n",
      "Mean Squared Error: 11.615945781297592\n",
      "\n",
      "Training model for station number: 17\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.0247429900672634e-30\n",
      "\n",
      "Training model for station number: 18\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.6657840358350265e-27\n",
      "\n",
      "Training model for station number: 19\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.0923347484663665e-29\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training model for station number: 20\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 21\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.9258066848707952e-29\n",
      "\n",
      "Training model for station number: 22\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.672385119068545e-29\n",
      "\n",
      "Training model for station number: 23\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.733165431326071e-28\n",
      "\n",
      "Training model for station number: 24\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 9.992238132799482e-31\n",
      "\n",
      "Training model for station number: 26\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.3476500539377313e-29\n",
      "\n",
      "Training model for station number: 27\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.4183972559577176e-30\n",
      "\n",
      "Training model for station number: 28\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.262177448353619e-29\n",
      "\n",
      "Training model for station number: 29\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.9187853493177437e-29\n",
      "\n",
      "Training model for station number: 31\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.31321580192825e-30\n",
      "\n",
      "Training model for station number: 32\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.8875065409291463e-28\n",
      "\n",
      "Training model for station number: 33\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.930380657631324e-31\n",
      "\n",
      "Training model for station number: 34\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.208810534618833e-30\n",
      "\n",
      "Training model for station number: 35\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 36\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8078606313796165\n",
      "Mean Squared Error: 6.01577930529022\n",
      "\n",
      "Training model for station number: 37\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1162381808877317e-28\n",
      "\n",
      "Training model for station number: 38\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.337683164175269e-28\n",
      "\n",
      "Training model for station number: 39\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.9582283945787943e-30\n",
      "\n",
      "Training model for station number: 40\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 41\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.5514264469346563e-30\n",
      "\n",
      "Training model for station number: 42\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.823646830161752e-30\n",
      "\n",
      "Training model for station number: 43\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0614912340653935e-28\n",
      "\n",
      "Training model for station number: 44\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7522649273271333\n",
      "Mean Squared Error: 6.139163553123206\n",
      "\n",
      "Training model for station number: 45\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 47\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.8925153341807155e-29\n",
      "\n",
      "Training model for station number: 48\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8895881507436106\n",
      "Mean Squared Error: 3.5872650725207995\n",
      "\n",
      "Training model for station number: 49\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3252863207713e-29\n",
      "\n",
      "Training model for station number: 51\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.711548748536678e-27\n",
      "\n",
      "Training model for station number: 52\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.068193710780265e-29\n",
      "\n",
      "Training model for station number: 53\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.641933194140677e-28\n",
      "\n",
      "Training model for station number: 54\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3337008370936573e-28\n",
      "\n",
      "Training model for station number: 56\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.208810534618833e-30\n",
      "\n",
      "Training model for station number: 57\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.7865323450608565e-30\n",
      "\n",
      "Training model for station number: 58\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.184669496932732e-29\n",
      "\n",
      "Training model for station number: 59\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.4020814563979812e-30\n",
      "\n",
      "Training model for station number: 60\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 61\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.488015623777573e-32\n",
      "\n",
      "Training model for station number: 62\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.231449895605508e-29\n",
      "\n",
      "Training model for station number: 63\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.267737497245674e-29\n",
      "\n",
      "Training model for station number: 64\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.2520800287667897e-28\n",
      "\n",
      "Training model for station number: 65\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 66\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1201824854138367e-29\n",
      "\n",
      "Training model for station number: 67\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.747089299799806e-30\n",
      "\n",
      "Training model for station number: 68\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9153017420301701\n",
      "Mean Squared Error: 5.600028574848929\n",
      "\n",
      "Training model for station number: 69\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3505298697383721e-28\n",
      "\n",
      "Training model for station number: 71\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.208034347898781e-30\n",
      "\n",
      "Training model for station number: 72\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8354323175807388\n",
      "Mean Squared Error: 0.4061939579388015\n",
      "\n",
      "Training model for station number: 73\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.0904813988356812e-30\n",
      "\n",
      "Training model for station number: 74\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5873759236917893\n",
      "Mean Squared Error: 6.659802420137618\n",
      "\n",
      "Training model for station number: 75\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 76\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9705213806806896\n",
      "Mean Squared Error: 0.7662417765605938\n",
      "\n",
      "Training model for station number: 77\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.143610707305732e-29\n",
      "\n",
      "Training model for station number: 78\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.665874649117549e-30\n",
      "\n",
      "Training model for station number: 79\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.204590602272485e-29\n",
      "\n",
      "Training model for station number: 80\n",
      "\n",
      "Model performance:\n",
      "R-squared: nan\n",
      "Mean Squared Error: 0.0\n",
      "\n",
      "Training model for station number: 82\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0322779069388184e-28\n",
      "\n",
      "Training model for station number: 83\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9927085397652137\n",
      "Mean Squared Error: 0.181054792725366\n",
      "\n",
      "Training model for station number: 84\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.888609052210118e-30\n",
      "\n",
      "Training model for station number: 86\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.0782911303670945e-28\n",
      "\n",
      "Training model for station number: 87\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.2421929720880202e-28\n",
      "\n",
      "Training model for station number: 88\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "C:\\Users\\riink\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:918: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.5745663668211395e-28\n",
      "\n",
      "Training model for station number: 89\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.784979971620754e-31\n",
      "\n",
      "Training model for station number: 91\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7115623895637665\n",
      "Mean Squared Error: 9.281208702215949\n",
      "\n",
      "Training model for station number: 92\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.8398992587956426e-30\n",
      "\n",
      "Training model for station number: 93\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0215222815341954e-27\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_current_weather_resampled = [\n",
    "    'feels_like',\n",
    "    'temperature_min', \n",
    "    'temperature_max', \n",
    "    'wind_speed', \n",
    "    'wind_gust'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_current_weather_resampled = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Group the merged station weather data by station_number\n",
    "grouped_data = merged_df_current_weather_resampled.groupby('station_number')\n",
    "\n",
    "# Iterate over each group (station)\n",
    "for station_number, group_data in grouped_data:\n",
    "    print(f\"\\nTraining model for station number: {station_number}\")\n",
    "    \n",
    "    # Filter the data for the current station number from df_4_hour\n",
    "    station_data = merged_df_current_weather_resampled[merged_df_current_weather_resampled['station_number'] == station_number]\n",
    "\n",
    "    # Check if the number of samples is sufficient for modeling\n",
    "    #if len(station_data) < 2:\n",
    "    #    print(f\"Not enough data for station {station_number}. Skipping model training.\")\n",
    "    #    continue\n",
    "    \n",
    "    # Extract descriptive features (X) and target variables (y)\n",
    "    X = station_data[descriptive_features_current_weather_resampled]\n",
    "    y = station_data[target_variables_current_weather_resampled]\n",
    "    \n",
    "    # Train a linear regression model\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X, y)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = linreg.predict(X)\n",
    "    \n",
    "    # Calculate feels_like based on temperature_min and temperature_max\n",
    "    feels_like_values = (y_pred[:, 0] + y_pred[:, 1]) / 2\n",
    "\n",
    "    # Ensure that feels_like_values are in the correct data type (float64)\n",
    "    feels_like_values = feels_like_values.astype(float)\n",
    "\n",
    "    # Round feels_like_values to the nearest integer\n",
    "    station_data.loc[:, 'feels_like'] = np.round(feels_like_values).astype(int)\n",
    "    \n",
    "    # Calculate R-squared\n",
    "    r_squared = r2_score(y, y_pred)\n",
    "    \n",
    "    # Calculate Mean Squared Error\n",
    "    mse = mean_squared_error(y, y_pred)\n",
    "    \n",
    "    print(\"\\nModel performance:\")\n",
    "    print(\"R-squared:\", r_squared)\n",
    "    print(\"Mean Squared Error:\", mse)\n",
    "    \n",
    "    # Save the trained model to a pickle file\n",
    "    #model_filename = f\"{station_number}_model_current_weather_for_each_station.pickle\"\n",
    "    #with open(model_filename, 'wb') as f:\n",
    "    ##    pickle.dump(linreg, f)\n",
    "    \n",
    "    #print(f\"Linear regression model for station number {station_number} saved as {model_filename}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "247db72d-c679-4a37-b82d-0b957bafc986",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# Iterate over each station number from 1 to 93, to create serialized output for each station pickle\n",
    "for station_number in range(1, 94):\n",
    "    # Construct the input filename\n",
    "    input_filename = f\"{station_number}_model_five_day_prediction_for_each_station.pickle\"\n",
    "    \n",
    "    # Check if the input file exists\n",
    "    if os.path.exists(input_filename):\n",
    "        # Load the input data for the current station from the pickle file\n",
    "        with open(input_filename, 'rb') as f:\n",
    "            station_data = pickle.load(f)\n",
    "\n",
    "        # Generate the output filename\n",
    "        output_filename = f\"{station_number}_output_data.pickle\"\n",
    "\n",
    "        # Save the station data to the output file\n",
    "        with open(output_filename, 'wb') as f:\n",
    "            pickle.dump(station_data, f)\n",
    "\n",
    "        print(f\"Output data for station number {station_number} saved as {output_filename}\")\n",
    "    else:\n",
    "        print(f\"Input file for station number {station_number} not found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "594a29cb-86df-4193-98da-10f25e936b68",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "b6ec0f4b-88b0-4ab1-9c23-41ebee82e5d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "# Specify the full path to the pickle file\n",
    "file_path = os.path.join('C:\\\\Users\\\\riink\\\\anaconda3\\\\envs\\\\DublinBikes', '1_model_current_weather_for_each_station.pickle')\n",
    "\n",
    "# Load the DataFrame from the pickle file\n",
    "with open(file_path, 'rb') as f:\n",
    "    loaded_df = pickle.load(f)\n",
    "\n",
    "# Display the loaded DataFrame\n",
    "print(loaded_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "b559ddf9-33fe-4439-91f8-c5b56ca4f77d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: [  0.         -13.42395801  -1.05039811  45.47435612 -14.47435612]\n",
      "Coefficients: [[ 0.          0.          0.          0.          0.        ]\n",
      " [ 2.70850941 -2.25683911  1.16124728  0.18557893 -1.38792758]\n",
      " [ 4.92673813 -5.89119701  1.22334416  0.21511499 -2.98945776]\n",
      " [-7.63524754  8.14803612 -2.38459143 -0.40069392  4.37738535]\n",
      " [ 7.63524754 -8.14803612  2.38459143  0.40069392 -4.37738535]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Intercept:\", loaded_df.intercept_)\n",
    "print(\"Coefficients:\", loaded_df.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "fa30a58c-7bdc-4dd3-9a08-31822f7b3b45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training model for station number: 1\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0791617183423442e-28\n",
      "\n",
      "Training model for station number: 2\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.3228793480172066e-29\n",
      "\n",
      "Training model for station number: 3\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.2813059048154755e-28\n",
      "\n",
      "Training model for station number: 4\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5758088081495185\n",
      "Mean Squared Error: 6.716202531645567\n",
      "\n",
      "Training model for station number: 5\n",
      "Not enough data for station 5. Skipping model training.\n",
      "\n",
      "Training model for station number: 6\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1056674447577701e-28\n",
      "\n",
      "Training model for station number: 7\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.4373425918681914e-30\n",
      "\n",
      "Training model for station number: 8\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.3702894149244053e-29\n",
      "\n",
      "Training model for station number: 9\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.578824321722995e-29\n",
      "\n",
      "Training model for station number: 11\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.8952838681830344e-29\n",
      "\n",
      "Training model for station number: 12\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.961459883310695e-30\n",
      "\n",
      "Training model for station number: 13\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9644572210257639\n",
      "Mean Squared Error: 0.09087145602650173\n",
      "\n",
      "Training model for station number: 14\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.778945659192397e-27\n",
      "\n",
      "Training model for station number: 15\n",
      "Not enough data for station 15. Skipping model training.\n",
      "\n",
      "Training model for station number: 16\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.581476095487245\n",
      "Mean Squared Error: 11.615945781297592\n",
      "\n",
      "Training model for station number: 17\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.0247429900672634e-30\n",
      "\n",
      "Training model for station number: 18\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.6657840358350265e-27\n",
      "\n",
      "Training model for station number: 19\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.0923347484663665e-29\n",
      "\n",
      "Training model for station number: 20\n",
      "Not enough data for station 20. Skipping model training.\n",
      "\n",
      "Training model for station number: 21\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.9258066848707952e-29\n",
      "\n",
      "Training model for station number: 22\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.672385119068545e-29\n",
      "\n",
      "Training model for station number: 23\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.733165431326071e-28\n",
      "\n",
      "Training model for station number: 24\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 9.992238132799482e-31\n",
      "\n",
      "Training model for station number: 26\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.3476500539377313e-29\n",
      "\n",
      "Training model for station number: 27\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.4183972559577176e-30\n",
      "\n",
      "Training model for station number: 28\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.262177448353619e-29\n",
      "\n",
      "Training model for station number: 29\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.9187853493177437e-29\n",
      "\n",
      "Training model for station number: 31\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.31321580192825e-30\n",
      "\n",
      "Training model for station number: 32\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.8875065409291463e-28\n",
      "\n",
      "Training model for station number: 33\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.930380657631324e-31\n",
      "\n",
      "Training model for station number: 34\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.208810534618833e-30\n",
      "\n",
      "Training model for station number: 35\n",
      "Not enough data for station 35. Skipping model training.\n",
      "\n",
      "Training model for station number: 36\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8078606313796165\n",
      "Mean Squared Error: 6.01577930529022\n",
      "\n",
      "Training model for station number: 37\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1162381808877317e-28\n",
      "\n",
      "Training model for station number: 38\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.337683164175269e-28\n",
      "\n",
      "Training model for station number: 39\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.9582283945787943e-30\n",
      "\n",
      "Training model for station number: 40\n",
      "Not enough data for station 40. Skipping model training.\n",
      "\n",
      "Training model for station number: 41\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.5514264469346563e-30\n",
      "\n",
      "Training model for station number: 42\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.823646830161752e-30\n",
      "\n",
      "Training model for station number: 43\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0614912340653935e-28\n",
      "\n",
      "Training model for station number: 44\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7522649273271333\n",
      "Mean Squared Error: 6.139163553123206\n",
      "\n",
      "Training model for station number: 45\n",
      "Not enough data for station 45. Skipping model training.\n",
      "\n",
      "Training model for station number: 47\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.8925153341807155e-29\n",
      "\n",
      "Training model for station number: 48\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8895881507436106\n",
      "Mean Squared Error: 3.5872650725207995\n",
      "\n",
      "Training model for station number: 49\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3252863207713e-29\n",
      "\n",
      "Training model for station number: 51\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 8.711548748536678e-27\n",
      "\n",
      "Training model for station number: 52\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.068193710780265e-29\n",
      "\n",
      "Training model for station number: 53\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.641933194140677e-28\n",
      "\n",
      "Training model for station number: 54\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3337008370936573e-28\n",
      "\n",
      "Training model for station number: 56\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.208810534618833e-30\n",
      "\n",
      "Training model for station number: 57\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.7865323450608565e-30\n",
      "\n",
      "Training model for station number: 58\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.184669496932732e-29\n",
      "\n",
      "Training model for station number: 59\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.4020814563979812e-30\n",
      "\n",
      "Training model for station number: 60\n",
      "Not enough data for station 60. Skipping model training.\n",
      "\n",
      "Training model for station number: 61\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.488015623777573e-32\n",
      "\n",
      "Training model for station number: 62\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.231449895605508e-29\n",
      "\n",
      "Training model for station number: 63\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 4.267737497245674e-29\n",
      "\n",
      "Training model for station number: 64\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.2520800287667897e-28\n",
      "\n",
      "Training model for station number: 65\n",
      "Not enough data for station 65. Skipping model training.\n",
      "\n",
      "Training model for station number: 66\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.1201824854138367e-29\n",
      "\n",
      "Training model for station number: 67\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.747089299799806e-30\n",
      "\n",
      "Training model for station number: 68\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9153017420301701\n",
      "Mean Squared Error: 5.600028574848929\n",
      "\n",
      "Training model for station number: 69\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.3505298697383721e-28\n",
      "\n",
      "Training model for station number: 71\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.208034347898781e-30\n",
      "\n",
      "Training model for station number: 72\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.8354323175807388\n",
      "Mean Squared Error: 0.4061939579388015\n",
      "\n",
      "Training model for station number: 73\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.0904813988356812e-30\n",
      "\n",
      "Training model for station number: 74\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.5873759236917893\n",
      "Mean Squared Error: 6.659802420137618\n",
      "\n",
      "Training model for station number: 75\n",
      "Not enough data for station 75. Skipping model training.\n",
      "\n",
      "Training model for station number: 76\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9705213806806896\n",
      "Mean Squared Error: 0.7662417765605938\n",
      "\n",
      "Training model for station number: 77\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 3.143610707305732e-29\n",
      "\n",
      "Training model for station number: 78\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 6.665874649117549e-30\n",
      "\n",
      "Training model for station number: 79\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.204590602272485e-29\n",
      "\n",
      "Training model for station number: 80\n",
      "Not enough data for station 80. Skipping model training.\n",
      "\n",
      "Training model for station number: 82\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0322779069388184e-28\n",
      "\n",
      "Training model for station number: 83\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.9927085397652137\n",
      "Mean Squared Error: 0.181054792725366\n",
      "\n",
      "Training model for station number: 84\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.888609052210118e-30\n",
      "\n",
      "Training model for station number: 86\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 7.0782911303670945e-28\n",
      "\n",
      "Training model for station number: 87\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.2421929720880202e-28\n",
      "\n",
      "Training model for station number: 88\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.5745663668211395e-28\n",
      "\n",
      "Training model for station number: 89\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 5.784979971620754e-31\n",
      "\n",
      "Training model for station number: 91\n",
      "\n",
      "Model performance:\n",
      "R-squared: 0.7115623895637665\n",
      "Mean Squared Error: 9.281208702215949\n",
      "\n",
      "Training model for station number: 92\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 2.8398992587956426e-30\n",
      "\n",
      "Training model for station number: 93\n",
      "\n",
      "Model performance:\n",
      "R-squared: 1.0\n",
      "Mean Squared Error: 1.0215222815341954e-27\n"
     ]
    }
   ],
   "source": [
    "# Define descriptive features including time weather prediction\n",
    "descriptive_features_current_weather_resampled = [\n",
    "    'feels_like',\n",
    "    'temperature_min', \n",
    "    'temperature_max', \n",
    "    'wind_speed', \n",
    "    'wind_gust'\n",
    "]\n",
    "\n",
    "# Define target variables\n",
    "target_variables_current_weather_resampled = [\n",
    "    'electrical_internal_battery_bikes',\n",
    "    'mechanical_bikes',\n",
    "    'electrical_removable_battery_bikes',\n",
    "    'empty_stands_number',\n",
    "    'total_bikes',\n",
    "]\n",
    "\n",
    "# Group the merged station weather data by station_number\n",
    "grouped_data = merged_df_current_weather_resampled.groupby('station_number')\n",
    "\n",
    "# Iterate over each group (station)\n",
    "for station_number, group_data in grouped_data:\n",
    "    print(f\"\\nTraining model for station number: {station_number}\")\n",
    "    \n",
    "    # Filter the data for the current station number from df_4_hour\n",
    "    station_data = merged_df_current_weather_resampled[merged_df_current_weather_resampled['station_number'] == station_number]\n",
    "\n",
    "    # Check if the number of samples is sufficient for modeling\n",
    "    if len(station_data) < 2:\n",
    "        print(f\"Not enough data for station {station_number}. Skipping model training.\")\n",
    "        continue\n",
    "    \n",
    "    # Extract descriptive features (X) and target variables (y)\n",
    "    X = station_data[descriptive_features_current_weather_resampled]\n",
    "    y = station_data[target_variables_current_weather_resampled]\n",
    "    \n",
    "    # Train a linear regression model\n",
    "    linreg = LinearRegression()\n",
    "    linreg.fit(X, y)\n",
    "    \n",
    "    # Make predictions\n",
    "    y_pred = linreg.predict(X)\n",
    "    \n",
    "    # Calculate feels_like based on temperature_min and temperature_max\n",
    "    feels_like_values = (y_pred[:, 0] + y_pred[:, 1]) / 2\n",
    "\n",
    "    # Ensure that feels_like_values are in the correct data type (float64)\n",
    "    feels_like_values = feels_like_values.astype(float)\n",
    "\n",
    "    # Round feels_like_values to the nearest integer\n",
    "    station_data.loc[:, 'feels_like'] = np.round(feels_like_values).astype(int)\n",
    "    \n",
    "    # Calculate R-squared\n",
    "    r_squared = r2_score(y, y_pred)\n",
    "    \n",
    "    # Calculate Mean Squared Error\n",
    "    mse = mean_squared_error(y, y_pred)\n",
    "    \n",
    "    print(\"\\nModel performance:\")\n",
    "    print(\"R-squared:\", r_squared)\n",
    "    print(\"Mean Squared Error:\", mse)\n",
    "    \n",
    "    # Save the trained model to a pickle file\n",
    "    #model_filename = f\"{station_number}_model_five_day_prediction_for_each_station.pickle\"\n",
    "    #with open(model_filename, 'wb') as f:\n",
    "    #    pickle.dump(linreg, f)\n",
    "    \n",
    "    #print(f\"Linear regression model for station number {station_number} saved as {model_filename}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "736d3b29-8bea-4d8e-a6a2-378bee417897",
   "metadata": {},
   "source": [
    "<h3><center><strong>Evaluating model performance with Cross-validation</strong></center></h3>\n",
    "<p>In the context of R-squared, values closer to 0 indicate that the model explains a smaller proportion of the variance in the target variable, while negative values indicate that the model performs worse than a model that simply predicts the mean of the target variable.</p>\n",
    "<p>Therefore, in this case, the first set of cross-validation scores with a mean R-squared of <strong>-0.109</strong> indicates relatively better performance compared to the second set with a mean R-squared of <strong>-6.360</strong>.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "5091370c-7923-44f6-8cbb-9ff146439a6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores: [-0.2881535  -0.26121217 -0.21700552 -0.35232166 -0.22270804]\n",
      "Mean R-squared: -0.26828017644972596\n",
      "Standard deviation of R-squared: 0.049424257307510926\n"
     ]
    }
   ],
   "source": [
    "# Define your descriptive features and target variable\n",
    "X = merged_df_current_weather_resampled[['feels_like', 'temperature_min', 'temperature_max', 'wind_speed','wind_gust']]\n",
    "y = merged_df_current_weather_resampled['total_bikes']\n",
    "\n",
    "# Initialize your model\n",
    "model = LinearRegression()\n",
    "\n",
    "# Perform cross-validation\n",
    "scores = cross_val_score(model, X, y, cv=5, scoring='r2')  # Using R-squared as the scoring metric and 5-fold cross-validation\n",
    "\n",
    "# Print the cross-validation scores\n",
    "print(\"Cross-validation scores:\", scores)\n",
    "\n",
    "# Calculate the mean and standard deviation of the cross-validation scores\n",
    "print(\"Mean R-squared:\", scores.mean())\n",
    "print(\"Standard deviation of R-squared:\", scores.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "f2573fa7-2d0f-4920-a80e-53b264090d79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores: [-0.32716935 -0.0169778  -0.0139088  -0.1530651  -0.16794906]\n",
      "Mean R-squared: -0.13581402237558887\n",
      "Standard deviation of R-squared: 0.11569792781622336\n"
     ]
    }
   ],
   "source": [
    "# Prepare the descriptive features\n",
    "X = merged_df_current_weather_hdw[['feels_like', 'temperature_min', 'temperature_max', 'wind_speed','wind_gust']]\n",
    "y = merged_df_current_weather_hdw['total_bikes']\n",
    "\n",
    "# Initialize the linear regression model\n",
    "linreg = LinearRegression()\n",
    "\n",
    "# Perform cross-validation\n",
    "cv_scores = cross_val_score(linreg, X, y, cv=5, scoring='r2')\n",
    "\n",
    "# Print cross-validation scores\n",
    "print(\"Cross-validation scores:\", cv_scores)\n",
    "print(\"Mean R-squared:\", cv_scores.mean())\n",
    "print(\"Standard deviation of R-squared:\", cv_scores.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "928ecaed-29f0-4a99-bf22-a5abade18ed0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X\t X_test\t X_train\t correlation_matrix\t df_combined_current\t df_combined_extreme\t df_combined_five_day\t df_current_weather\t df_current_weather_hdw\t \n",
      "df_current_weather_head\t df_current_weather_resampled\t df_extreme_weather\t df_extreme_weather_head\t df_extreme_weather_resampled\t df_five_day_prediction\t df_five_day_prediction_hdw\t df_five_day_prediction_head\t df_five_day_prediction_resampled\t \n",
      "df_station\t df_station_head\t df_station_status\t df_station_status_head\t df_station_status_reset\t group_data\t merged_df\t merged_df_current_weather_hdw\t merged_df_current_weather_resampled\t \n",
      "merged_df_five_day_prediction_hdw\t merged_df_five_day_prediction_resampled\t station_data\t station_status_resampled\t y_test\t y_train\t \n"
     ]
    }
   ],
   "source": [
    "# checking all the df in jupyter notebook\n",
    "%who DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ed7e695-d276-4b44-9c3b-5d75c9d5a75a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2349c4fb-e4bc-4a98-9d8a-573538ab7e33",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7e3c5c1-b380-44a9-a4d6-2028d47f0353",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
