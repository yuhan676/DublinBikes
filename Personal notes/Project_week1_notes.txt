Group work;
Discussed the use of Scrum management apps (e.g. Jira), we need to ask TA about app recommendation for our group size
Looked at examples of past projects
Discussed examples of mockup tools (Balsamiq)
Went through lecture notes of deliverables and suggested features (base for project backlog), discussed options of representing stand information 
Looked at past project’s week1 minutes, settled task before Thursday and on Thursday
............
mockup is a design of the project
balsamic for mockup- helps to visualize how the feature works
project plannign for week 2
look up personal things on the go
scrum modules - future plans, discussed and discussed nto to go ahead
talking about the visual display of the app
clear and concice
.............
Scrum data, 
.......
How should we go ahead with making the features in relation to time
....................
to find what people find annoying about bykes, google for complaints
Jc2
.............
Project work for Thursday
1. Understand JCDeaux
If you're looking to collect data through the JCDecaux API, it's important to note that JCDecaux provides a public API for accessing data related to their bike-sharing systems, such as station information, bike availability, etc. This API allows developers to integrate real-time bike-sharing data into their applications.

Here's a general guide on how to collect data through the JCDecaux API using Python:

1. **Sign Up and Obtain API Key**:
   Sign up for an account on the JCDecaux Developer website (https://developer.jcdecaux.com/). After signing up, obtain an API key, which is required to authenticate your requests to the API.

2. **Install Requests Library**:
   You'll need the `requests` library to make HTTP requests to the JCDecaux API. Install it using pip if you haven't already:

   ```bash
   pip install requests
   ```

3. **Make API Requests**:
   Use the `requests` library to make GET requests to the JCDecaux API endpoints. The base URL for the JCDecaux API is typically `https://api.jcdecaux.com/vls/v3/`.

   Here's an example of how to make a request to get information about bike stations in a specific city (replace `YOUR_API_KEY` with your actual API key):

   ```python
   import requests

   api_key = 'YOUR_API_KEY'
   city = 'paris'  # Example city
   endpoint = f'https://api.jcdecaux.com/vls/v3/stations?contract={city}&apiKey={api_key}'

   response = requests.get(endpoint)
   data = response.json()

   # Process the data
   for station in data:
       station_name = station['name']
       available_bikes = station['mainStands']['availabilities']['bikes']
       print(f"Station: {station_name}, Available Bikes: {available_bikes}")
   ```

   This example retrieves information about bike stations in Paris and prints the station name along with the number of available bikes.

4. **Handle Rate Limits and Errors**:
   Be aware of any rate limits imposed by the JCDecaux API and handle potential errors gracefully in your code.

5. **Explore Available Endpoints**:
   Explore the JCDecaux API documentation to discover all available endpoints and parameters you can use to retrieve different types of data.

6. **Implement Data Collection Logic**:
   Depending on your specific use case, implement the logic to collect and process the data from the JCDecaux API according to your requirements.

Remember to refer to the official JCDecaux API documentation for detailed information about available endpoints, parameters, rate limits, and any other relevant details.
2. Finish Meeting 1 minutes
3. Understand flask, can build a web page easy with Python and interacting with API's, Flask is web application framework. Need linux, does not work on windows. Tool to use to build a webpagw, written like python and feels like python. Use Python to populate code, very simple. 
4. Set up a common IDE environment which will be VSCode, liveshare extension, to share the code and screen in real time. CodeTogether extension to share code and work on the same code.
When sharing Visual Studio Code (VSCode) for collaborative coding with multiple people, there are several options depending on your specific needs and preferences:

1. **Live Share Extension**:
   - **Description**: This is a built-in extension in VSCode that enables real-time collaborative editing, debugging, and more. It allows multiple users to work in the same workspace simultaneously.
   - **How to Use**: Install the Live Share extension from the VSCode Marketplace, then start a Live Share session and share the session link with others. Participants can join the session using that link and collaborate in real-time.

2. **Code Server**:
   - **Description**: Code Server is a VSCode instance running on a remote server accessible through a web browser. It allows multiple users to access the same VSCode instance and collaborate on code.
   - **How to Use**: Set up a server with Code Server installed and share the URL with collaborators. They can access the VSCode instance through their web browser and collaborate in real-time.

3. **Git Version Control**:
   - **Description**: Using Git along with a platform like GitHub, GitLab, or Bitbucket allows multiple people to collaborate on code by pushing and pulling changes to and from a central repository.
   - **How to Use**: Create a repository on a Git hosting platform, share the repository URL with collaborators, and have them clone the repository to their local machines. Collaborators can then make changes, commit them, and push them to the central repository.

4. **Screen Sharing with Remote Desktop Tools**:
   - **Description**: You can use screen sharing and remote desktop tools like Zoom, Microsoft Teams, or AnyDesk to share your VSCode window with others. This method allows for real-time collaboration but does not provide built-in code synchronization features.
   - **How to Use**: Start a screen sharing session with the remote desktop tool of your choice and have collaborators join the session. They can see your VSCode window and provide input as you code.

5. **Pair Programming Extensions**:
   - **Description**: There are VSCode extensions specifically designed for pair programming, such as "CodeTogether" or "Peach". These extensions offer features like real-time collaboration, voice and video calls, and shared terminals.
   - **How to Use**: Install the pair programming extension of your choice, start a session, and share the session link with collaborators. They can join the session and collaborate in real-time.

Choose the method that best fits your requirements in terms of features, ease of setup, and integration with your existing workflow.
5. Learn how to work w/ github
IN SPRINT 1 WE PLAN ON MAKING A GITHUB PAGE WHICH OUTPUTS INFORMATION FROM JCDECAUX
6. Learn Scrum (individually) 
Scrum is a popular framework used in agile project management, particularly in software development, to help teams work together more effectively. It emphasizes iterative development, collaboration, and customer feedback. Here's an explanation of Scrum for beginners:

1. **Roles**:
   - **Product Owner**: Represents the stakeholders and is responsible for defining the features of the product, prioritizing the backlog, and ensuring the team understands the goals.
   - **Scrum Master**: Facilitates the Scrum process, removes obstacles that hinder the team's progress, and ensures the team adheres to Scrum practices.
   - **Development Team**: A cross-functional group responsible for delivering the product increment in each sprint.

2. **Artifacts**:
   - **Product Backlog**: A prioritized list of features, enhancements, and fixes that need to be implemented in the product. Managed by the Product Owner.
   - **Sprint Backlog**: A subset of items from the Product Backlog that the team commits to completing during a sprint.
   - **Increment**: The sum of all the completed items from the Sprint Backlog at the end of a sprint, potentially shippable and ready to be delivered to the customer.

3. **Events**:
   - **Sprint**: A time-boxed period (usually 2-4 weeks) during which the Development Team works to complete the items in the Sprint Backlog.
   - **Sprint Planning**: A meeting at the beginning of each sprint where the Product Owner and Development Team collaborate to select and plan the work for the upcoming sprint.
   - **Daily Standup (Daily Scrum)**: A short daily meeting where team members discuss what they worked on yesterday, what they plan to work on today, and any impediments they're facing.
   - **Sprint Review**: A meeting at the end of each sprint where the Development Team demonstrates the completed work to the stakeholders and receives feedback.
   - **Sprint Retrospective**: A meeting at the end of each sprint where the team reflects on their process, identifies what went well and what could be improved, and creates action items for the next sprint.

4. **Iterative Development**:
   - Scrum promotes iterative development, where the product is built incrementally over multiple sprints.
   - Each sprint results in a potentially shippable product increment, allowing for early and continuous delivery of value to the customer.

5. **Adaptation**:
   - Scrum encourages teams to inspect and adapt their process continuously.
   - Through regular feedback loops and retrospectives, teams identify areas for improvement and adjust their practices accordingly.

6. **Transparency, Inspection, and Adaptation**:
   - Scrum emphasizes transparency in communication and processes, allowing stakeholders to have visibility into the project's progress.
   - Regular inspection of the product and the process helps identify issues early, enabling the team to adapt and make necessary changes.

Overall, Scrum provides a structured framework for teams to collaborate, deliver value iteratively, and adapt to changing requirements and circumstances effectively.
7. Read through lecture notes (individually) read
8. Read through Reference List (individually) read
8. Read forums to understand what user complains about current bike-renting apps - reviews on tripadvisor mostly about issues with payements.
• User requirements
• goals or tasks the users must be able to perform with the
product that will provide value to someone
• includes descriptions of product attributes or characteristics
that are important to user satisfaction
• describe what the user will be able to do with the system. An
example of a use case is “Check in for a flight” using an
airline’s website or a kiosk at the airport.
COMP30830 17
Requirements
• Functional requirements
• behaviours the product will exhibit under specific conditions.
• describe what the developers must implement to enable users to
accomplish their tasks (user requirements), thereby satisfying the business
requirements
• often written in the form of the traditional “shall” statements: “The
Passenger shall be able to print boarding passes for all flight segments for
which he has checked in” or “If the Passenger’s profile does not indicate a
seating preference, the reservation system shall assign a seat.”
• Non-Functional requirements
• constraints on the services or functions offered by the system.
• includes timing constraints, constraints on the development process and
standards.
• often apply to the system as a whole.
• do not usually just apply to individual system features or services, behaviours the
product will exhibit under specific conditions.
• could include system’s availability, usability, security, performance, and many
other characteristics
COMP30830 19
Requirements
equirements and requirements management need to:
validate:
• are we building the right thing?
verify
• are we building the thing right?
It is necessary to have a good environment and processes to analyse and
develop requirements for the complete development process
COMP30830 22
requierments categories 
User Requirements
System Requirements
Functional
Requirements
Non-Functional
Requirements
Statements in natural language plus diagrams of the
services the system provides and its operational
constraints. Written for customers
A structured document setting out detailed descriptions
of the system’s functions, services and operational
constraints. Defines what should be implemented so
may be part of a contract between client and contractor.
Statements of services the system should provide, how
the system should react to particular inputs and how the
system should behave in particular situations. May state
what the system should not do.
Constraints on the services or functions offered by the
system such as timing constraints, constraints on the
development process, standards, etc. Often apply to the
system as a whole rather than individual features or
services.
.................


